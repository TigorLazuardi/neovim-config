!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_OUTPUT_FILESEP	slash	/slash or backslash/
!_TAG_OUTPUT_MODE	u-ctags	/u-ctags or e-ctags/
!_TAG_PROGRAM_AUTHOR	Universal Ctags Team	//
!_TAG_PROGRAM_NAME	Universal Ctags	/Derived from Exuberant Ctags/
!_TAG_PROGRAM_URL	https://ctags.io/	/official site/
!_TAG_PROGRAM_VERSION	0.0.0	/a3c87ab5/
$NVIM_TUI_ENABLE_TRUE_COLOR	init_old.vim	/^let $NVIM_TUI_ENABLE_TRUE_COLOR=1 $/;"	v
*	defx.vim	/^  nnoremap <silent><buffer><expr> * defx#do_action('toggle_select_all')$/;"	m
+	base.vim	/^nnoremap <silent> + :res +5<cr>:vertical resize +5<cr>$/;"	m
.	defx.vim	/^  nnoremap <silent><buffer><expr> . defx#do_action('toggle_ignored_files')$/;"	m
0	coc-settings.json	/^            "-isystem",$/;"	s	array:languageserver.ccls.initializationOptions.clang.extraArgs
0	coc-settings.json	/^      "args": ["--stdio"],$/;"	s	array:languageserver.intelephense.args
0	coc-settings.json	/^      "args": ["start"],$/;"	s	array:languageserver.bash.args
0	coc-settings.json	/^      "filetypes": ["c", "cpp", "objc", "objcpp"],$/;"	s	array:languageserver.ccls.filetypes
0	coc-settings.json	/^      "filetypes": ["php"],$/;"	s	array:languageserver.intelephense.filetypes
0	coc-settings.json	/^      "filetypes": ["sh"],$/;"	s	array:languageserver.bash.filetypes
0	coc-settings.json	/^      "ignoredRootPaths": ["~"]$/;"	s	array:languageserver.bash.ignoredRootPaths
0	coc-settings.json	/^      "rootPatterns": [".ccls", "compile_commands.json", ".vim\/", ".git\/", ".hg\/"],$/;"	s	array:languageserver.ccls.rootPatterns
0	coc-settings.json	/^    "css",$/;"	s	array:coc.preferences.formatOnSaveFiletypes
0	coc-settings.json	/^  "coc.source.emoji.filetypes": ["markdown"],$/;"	s	array:coc.source.emoji.filetypes
1	coc-settings.json	/^            "\/Library\/Developer\/CommandLineTools\/usr\/include\/c++\/v1",$/;"	s	array:languageserver.ccls.initializationOptions.clang.extraArgs
1	coc-settings.json	/^      "filetypes": ["c", "cpp", "objc", "objcpp"],$/;"	s	array:languageserver.ccls.filetypes
1	coc-settings.json	/^      "rootPatterns": [".ccls", "compile_commands.json", ".vim\/", ".git\/", ".hg\/"],$/;"	s	array:languageserver.ccls.rootPatterns
1	coc-settings.json	/^    "Markdown",$/;"	s	array:coc.preferences.formatOnSaveFiletypes
10	coc-settings.json	/^    "rust", $/;"	s	array:coc.preferences.formatOnSaveFiletypes
11	coc-settings.json	/^    "go", $/;"	s	array:coc.preferences.formatOnSaveFiletypes
12	coc-settings.json	/^    "python",$/;"	s	array:coc.preferences.formatOnSaveFiletypes
13	coc-settings.json	/^    "html",$/;"	s	array:coc.preferences.formatOnSaveFiletypes
14	coc-settings.json	/^    "toml"$/;"	s	array:coc.preferences.formatOnSaveFiletypes
2	coc-settings.json	/^            "-I",$/;"	s	array:languageserver.ccls.initializationOptions.clang.extraArgs
2	coc-settings.json	/^      "filetypes": ["c", "cpp", "objc", "objcpp"],$/;"	s	array:languageserver.ccls.filetypes
2	coc-settings.json	/^      "rootPatterns": [".ccls", "compile_commands.json", ".vim\/", ".git\/", ".hg\/"],$/;"	s	array:languageserver.ccls.rootPatterns
2	coc-settings.json	/^    "typescript", $/;"	s	array:coc.preferences.formatOnSaveFiletypes
3	coc-settings.json	/^            "\/Applications\/Xcode.app\/Contents\/Developer\/Platforms\/MacOSX.platform\/Develop/;"	s	array:languageserver.ccls.initializationOptions.clang.extraArgs
3	coc-settings.json	/^      "filetypes": ["c", "cpp", "objc", "objcpp"],$/;"	s	array:languageserver.ccls.filetypes
3	coc-settings.json	/^      "rootPatterns": [".ccls", "compile_commands.json", ".vim\/", ".git\/", ".hg\/"],$/;"	s	array:languageserver.ccls.rootPatterns
3	coc-settings.json	/^    "javascript", $/;"	s	array:coc.preferences.formatOnSaveFiletypes
4	coc-settings.json	/^      "rootPatterns": [".ccls", "compile_commands.json", ".vim\/", ".git\/", ".hg\/"],$/;"	s	array:languageserver.ccls.rootPatterns
4	coc-settings.json	/^    "typescriptreact", $/;"	s	array:coc.preferences.formatOnSaveFiletypes
5	coc-settings.json	/^    "javascriptreact", $/;"	s	array:coc.preferences.formatOnSaveFiletypes
6	coc-settings.json	/^    "yaml", $/;"	s	array:coc.preferences.formatOnSaveFiletypes
7	coc-settings.json	/^    "json", $/;"	s	array:coc.preferences.formatOnSaveFiletypes
8	coc-settings.json	/^    "markdown", $/;"	s	array:coc.preferences.formatOnSaveFiletypes
9	coc-settings.json	/^    "vim", $/;"	s	array:coc.preferences.formatOnSaveFiletypes
;	coc.vim	/^inoremap <silent><expr> ; pumvisible() ? coc#_select_confirm() : ";"$/;"	m
;	defx.vim	/^  nnoremap <silent><buffer><expr> ; defx#do_action('repeat')$/;"	m
;	fzf.vim	/^nmap <silent> ; :Buffers<CR>$/;"	m
<A-j>	base.vim	/^inoremap <A-j> :m .+1<CR>==gi$/;"	m
<A-j>	base.vim	/^nnoremap <A-j> :m .+1<CR>==$/;"	m
<A-j>	base.vim	/^vnoremap <A-j> :m '>+1<CR>gv=gv$/;"	m
<A-j>	init_old.vim	/^inoremap <A-j> :m .+1<CR>==gi$/;"	m
<A-j>	init_old.vim	/^nnoremap <A-j> :m .+1<CR>==$/;"	m
<A-j>	init_old.vim	/^vnoremap <A-j> :m '>+1<CR>gv=gv$/;"	m
<A-k>	base.vim	/^inoremap <A-k> :m .-2<CR>==gi$/;"	m
<A-k>	base.vim	/^nnoremap <A-k> :m .-2<CR>==$/;"	m
<A-k>	base.vim	/^vnoremap <A-k> :m '<-2<CR>gv=gv$/;"	m
<A-k>	init_old.vim	/^inoremap <A-k> :m .-2<CR>==gi$/;"	m
<A-k>	init_old.vim	/^nnoremap <A-k> :m .-2<CR>==$/;"	m
<A-k>	init_old.vim	/^vnoremap <A-k> :m '<-2<CR>gv=gv$/;"	m
<A-n>	base.vim	/^inoremap <silent> <A-n> <esc>:bnext!<cr>$/;"	m
<A-n>	base.vim	/^nnoremap <silent> <A-n> :bnext!<cr>$/;"	m
<A-p>	base.vim	/^inoremap <silent> <A-p> <esc>:bprev!<cr>$/;"	m
<A-p>	base.vim	/^nnoremap <silent> <A-p> :bprev!<cr>$/;"	m
<C-H>	base.vim	/^nnoremap <C-H> <C-W><C-H>$/;"	m
<C-J>	base.vim	/^nnoremap <C-J> <C-W><C-J>$/;"	m
<C-K>	base.vim	/^nnoremap <C-K> <C-W><C-K>$/;"	m
<C-L>	base.vim	/^nnoremap <C-L> <C-W><C-L>$/;"	m
<C-g>	defx.vim	/^  nnoremap <silent><buffer><expr> <C-g> defx#do_action('print')$/;"	m
<C-j>	coc.vim	/^vmap <C-j> <Plug>(coc-snippets-select)$/;"	m
<C-j>	init_old.vim	/^imap <C-j> <Plug>(coc-snippets-expand-jump)$/;"	m
<C-j>	init_old.vim	/^vmap <C-j> <Plug>(coc-snippets-select)$/;"	m
<C-l>	init_old.vim	/^imap <C-l> <Plug>(coc-snippets-expand)$/;"	m
<C-n>	init_old.vim	/^nmap <C-n> :NERDTreeToggle<CR>$/;"	m
<CR>	defx.vim	/^  nnoremap <silent><buffer><expr> <CR> defx#do_action('drop')$/;"	m
<CR>	ncm2.vim	/^imap <silent> <expr> <CR> ((pumvisible() && empty(v:completed_item)) ?  "\\<c-y>\\<Plug>delimitM/;"	m
<F10>	ultisnips.vim	/^nnoremap <silent> <F10> :UltiSnipsEdit<CR>$/;"	m
<F11>	base.vim	/^nmap <silent><F11> :e $HOME\/.config\/nvim\/$/;"	m
<F12>	base.vim	/^nmap <silent><F12> :source $HOME\/.config\/nvim\/init.vim<CR>:echo "Config reloaded"<CR>$/;"	m
<F1>	languageclient.vim	/^    nnoremap <F1> :call LanguageClient_contextMenu()<CR>$/;"	m
<F2>	coc.vim	/^nmap <F2> <Plug>(coc-rename)$/;"	m
<F2>	languageclient.vim	/^    nnoremap <silent> <F2> :call LanguageClient#textDocument_rename()<CR>$/;"	m
<F3>	fzf.vim	/^nmap <silent><F3> :Rg <c-r><c-w><CR>$/;"	m
<F3>	init_old.vim	/^noremap <F3> :Autoformat<CR>$/;"	m
<F4>	coc.vim	/^nnoremap <F4> :call ToggleSymbolHover()<CR>$/;"	m
<F4>	init_old.vim	/^nmap <F4> <Plug>(ale_fix)$/;"	m
<F5>	rust.vim	/^nnoremap <expr><silent><F5> &filetype == "rust" ? ":make run<CR>" :$/;"	m
<F7>	vimgo.vim	/^inoremap <expr><F7> &filetype == "go" ? "\\<esc>:GoFillStruct<CR>i" : "\\<nop>"$/;"	m
<F7>	vimgo.vim	/^nnoremap <expr><F7> &filetype == "go" ? "\\:GoFillStruct<CR>" : "\\<nop>"$/;"	m
<F8>	init_old.vim	/^nmap <F8> :TagbarToggle<CR>$/;"	m
<F8>	prose.vim	/^  inoremap <silent> <buffer> <F8> <C-o>:NextWordy<cr>$/;"	m
<F8>	prose.vim	/^  noremap <silent> <buffer> <F8> :<C-u>NextWordy<cr>$/;"	m
<F8>	prose.vim	/^  xnoremap <silent> <buffer> <F8> :<C-u>NextWordy<cr>$/;"	m
<F8>	tagbar.vim	/^nmap <silent> <F8> :TagbarToggle<CR>$/;"	m
<Leader><Enter>	fzf.vim	/^nnoremap <silent> <Leader><Enter> :call fzf#run({$/;"	m
<Leader>j	easymotion.vim	/^nmap <Leader>j <Plug>(easymotion-bd-jk)$/;"	m
<Leader>j	easymotion.vim	/^xmap <Leader>j <Plug>(easymotion-bd-jk)$/;"	m
<Leader>k	easymotion.vim	/^nmap <Leader>k <Plug>(easymotion-overwin-line)$/;"	m
<Leader>k	easymotion.vim	/^xmap <Leader>k <Plug>(easymotion-overwin-line)$/;"	m
<Leader>w	easymotion.vim	/^nmap <Leader>w <Plug>(easymotion-overwin-w)$/;"	m
<S-F5>	rust.vim	/^nnoremap <expr><silent><S-F5> &filetype == "rust" ? ":make test<CR>" : "\\<nop>"$/;"	m
<S-TAB>	coc.vim	/^inoremap <expr><S-TAB> pumvisible() ? "\\<C-p>" : "\\<C-h>"$/;"	m
<S-TAB>	deoplete.vim	/^imap <expr><S-TAB> pumvisible() ? "\\<C-p>" : "\\<S-TAB>"$/;"	m
<S-TAB>	init_old.vim	/^inoremap <expr><S-TAB> pumvisible() ? "\\<C-p>" : "\\<C-h>"$/;"	m
<S-Tab>	coc.vim	/^inoremap <silent><expr> <S-Tab> pumvisible() ? "\\<c-p>" : "\\<S-Tab>"$/;"	m
<S-Tab>	ncm2.vim	/^inoremap <expr> <S-Tab> pumvisible() ? "\\<C-p>" : "\\<S-Tab>"$/;"	m
<Space>	base.vim	/^nnoremap <Space> <nop>$/;"	m
<Space>	defx.vim	/^  nnoremap <silent><buffer><expr> <Space> defx#do_action('toggle_select') . 'j'$/;"	m
<Space>	init.vim	/^nnoremap <Space> <nop>$/;"	m
<TAB>	coc.vim	/^inoremap <silent><expr> <TAB>$/;"	m
<TAB>	deoplete.vim	/^imap <expr><TAB> pumvisible() ? "\\<C-n>" : "\\<TAB>"$/;"	m
<TAB>	init_old.vim	/^inoremap <silent><expr> <TAB>$/;"	m
<Tab>	coc.vim	/^inoremap <silent><expr> <Tab> pumvisible() ? "\\<c-n>" : "\\<Tab>"$/;"	m
<Tab>	ncm2.vim	/^inoremap <expr> <Tab> pumvisible() ? "\\<C-n>" : "\\<Tab>"$/;"	m
<c-=>	clip.vim	/^nmap <c-=> <plug>(YoinkPostPasteToggleFormat)$/;"	m
<c-c>	ncm2.vim	/^inoremap <c-c> <ESC>$/;"	m
<c-m>	coc.vim	/^imap <c-m> <Plug>(coc-snippets-expand-jump)$/;"	m
<c-m>	coc.vim	/^vmap <c-m> <Plug>(coc-snippets-expand-jump)$/;"	m
<c-n>	clip.vim	/^nmap <c-n> <plug>(YoinkPostPasteSwapBack)$/;"	m
<c-o>	base.vim	/^inoremap <c-o> <esc>A<CR> $/;"	m
<c-p>	clip.vim	/^nmap <c-p> <plug>(YoinkPostPasteSwapForward)$/;"	m
<c-s>	prose.vim	/^  inoremap <buffer> <c-s> <c-g>u<Esc>[s1z=`]A<c-g>u$/;"	m
<c-s>	prose.vim	/^  nnoremap <buffer> <c-s> [s1z=<c-o>$/;"	m
<c-space>	coc.vim	/^inoremap <silent><expr> <c-space> coc#refresh()$/;"	m
<c-space>	init_old.vim	/^inoremap <silent><expr> <c-space> coc#refresh()$/;"	m
<c-v>	easyclip.vim	/^cmap <c-v> <plug>EasyClipCommandModePaste$/;"	m
<c-v>	easyclip.vim	/^imap <c-v> <plug>EasyClipInsertModePaste$/;"	m
<cr>	coc.vim	/^inoremap <silent> <cr> <C-g>u<CR><c-r>=coc#on_enter()<CR>$/;"	m
<cr>	coc.vim	/^inoremap <silent><expr> <cr> pumvisible() ? coc#_select_confirm() : $/;"	m
<cr>	init_old.vim	/^inoremap <silent><expr> <cr> pumvisible() ? coc#_select_confirm() : $/;"	m
<kEnter>	init_old.vim	/^nmap <kEnter> o<Esc>$/;"	m
<leader>;	base.vim	/^nmap <leader>; mAA;<esc>`A$/;"	m
<leader>F	easymotion.vim	/^nmap <leader>F <Plug>(easymotion-overwin-f2)$/;"	m
<leader>F	easymotion.vim	/^xmap <leader>F <Plug>(easymotion-overwin-f2)$/;"	m
<leader>Q	prose.vim	/^  nnoremap <buffer> <silent> <leader>Q vapJgqap$/;"	m
<leader>a	coc.vim	/^xmap <leader>a  <Plug>(coc-codeaction-selected)$/;"	m
<leader>a	init_old.vim	/^nmap <leader>a  <Plug>(coc-codeaction-selected)$/;"	m
<leader>a	init_old.vim	/^nnoremap <silent> <leader>a :cclose<CR>:lclose<CR>$/;"	m
<leader>a	init_old.vim	/^xmap <leader>a  <Plug>(coc-codeaction-selected)$/;"	m
<leader>ac	init_old.vim	/^nmap <leader>ac  <Plug>(coc-codeaction)$/;"	m
<leader>cc	coc.vim	/^nnoremap <silent> <leader>cc  :<C-u>CocList commands<cr>$/;"	m
<leader>cd	coc.vim	/^nnoremap <silent> <leader>cd  :<C-u>CocList diagnostics<cr>$/;"	m
<leader>ce	coc.vim	/^nnoremap <silent> <leader>ce  :<C-u>CocList extensions<cr>$/;"	m
<leader>cj	coc.vim	/^nnoremap <silent> <leader>cj  :<C-u>CocNext<CR>$/;"	m
<leader>ck	coc.vim	/^nnoremap <silent> <leader>ck  :<C-u>CocPrev<CR>$/;"	m
<leader>co	coc.vim	/^nnoremap <silent> <leader>co  :<C-u>CocList outline<cr>$/;"	m
<leader>cp	coc.vim	/^nnoremap <silent> <leader>cp  :<C-u>CocListResume<CR>$/;"	m
<leader>cs	coc.vim	/^nnoremap <silent> <leader>cs  :<C-u>CocCommand snippets.editSnippets<cr>$/;"	m
<leader>cy	coc.vim	/^nnoremap <silent> <leader>cy  :<C-u>CocList -I symbols<cr>$/;"	m
<leader>e	defx.vim	/^nnoremap <silent> <leader>e :Defx -split=vertical -winwidth=30 -direction=topleft<CR>$/;"	m
<leader>e	fern.vim	/^nnoremap <silent> <leader>e :Fern . -reveal=% -drawer -toggle<CR>$/;"	m
<leader>e	nerdtree.vim	/^nmap <leader>e :NERDTreeToggle<CR>$/;"	m
<leader>f	easymotion.vim	/^nmap <leader>f <Plug>(easymotion-overwin-f)$/;"	m
<leader>f	easymotion.vim	/^xmap <leader>f <Plug>(easymotion-overwin-f)$/;"	m
<leader>f	init_old.vim	/^nmap <leader>f  <Plug>(coc-format-selected)$/;"	m
<leader>f	init_old.vim	/^xmap <leader>f  <Plug>(coc-format-selected)$/;"	m
<leader>n	base.vim	/^nmap <leader>n :e %:h\/$/;"	m
<leader>o	fzf.vim	/^nnoremap <silent> <leader>o :Files<cr>$/;"	m
<leader>qc	prose.vim	/^  map <silent> <buffer> <leader>qc <Plug>ReplaceWithCurly$/;"	m
<leader>qf	init_old.vim	/^nmap <leader>qf  <Plug>(coc-fix-current)$/;"	m
<leader>qs	prose.vim	/^  map <silent> <buffer> <leader>qs <Plug>ReplaceWithStraight$/;"	m
<leader>rn	init_old.vim	/^nmap <leader>rn <Plug>(coc-rename)$/;"	m
<leader>s	clip.vim	/^nmap <leader>s <plug>(SubversiveSubstituteRange)$/;"	m
<leader>s	clip.vim	/^xmap <leader>s <plug>(SubversiveSubstituteRange)$/;"	m
<leader>ss	clip.vim	/^nmap <leader>ss <plug>(SubversiveSubstituteWordRange)$/;"	m
<leader>t	easymotion.vim	/^nmap <leader>t <Plug>(easymotion-bd-t)$/;"	m
<leader>t	easymotion.vim	/^xmap <leader>t <Plug>(easymotion-bd-t)$/;"	m
<space>a	init_old.vim	/^nnoremap <silent> <space>a  :<C-u>CocList diagnostics<cr>$/;"	m
<space>c	init_old.vim	/^nnoremap <silent> <space>c  :<C-u>CocList commands<cr>$/;"	m
<space>e	init_old.vim	/^nnoremap <silent> <space>e  :<C-u>CocList extensions<cr>$/;"	m
<space>j	init_old.vim	/^nnoremap <silent> <space>j  :<C-u>CocNext<CR>$/;"	m
<space>k	init_old.vim	/^nnoremap <silent> <space>k  :<C-u>CocPrev<CR>$/;"	m
<space>o	init_old.vim	/^nnoremap <silent> <space>o  :<C-u>CocList outline<cr>$/;"	m
<space>p	init_old.vim	/^nnoremap <silent> <space>p  :<C-u>CocListResume<CR>$/;"	m
<space>s	init_old.vim	/^nnoremap <silent> <space>s  :<C-u>CocList -I symbols<cr>$/;"	m
<tab>	base.vim	/^xnoremap <tab> <esc>$/;"	m
C	defx.vim	/^  nnoremap <silent><buffer><expr> C defx#do_action('toggle_columns', dent:icon:filename:type:siz/;"	m
Fd	coc.vim	/^command! -nargs=? Fd :call CocAction('fold', <f-args>)$/;"	c
Fmt	coc.vim	/^command! -nargs=0 Fmt :call CocAction('format')$/;"	c
Fold	init_old.vim	/^command! -nargs=? Fold :call     CocAction('fold', <f-args>)$/;"	c
Format	init_old.vim	/^command! -nargs=0 Format :call CocAction('format')$/;"	c
H	base.vim	/^command! -nargs=1 -complete=help H :vert help <args>$/;"	c
HoverSymbol	coc.vim	/^        augroup HoverSymbol$/;"	a
HoverSymbol	coc.vim	/^    augroup HoverSymbol$/;"	a
HoverSymbol	coc.vim	/^augroup HoverSymbol$/;"	a
IsExpandable	deoplete.vim	/^  function IsExpandable()$/;"	f
K	coc.vim	/^nmap <silent> K :call CocActionAsync('doHover')<CR>$/;"	m
K	defx.vim	/^  nnoremap <silent><buffer><expr> K defx#do_action('new_directory')$/;"	m
K	init_old.vim	/^nnoremap <silent> K :call <SID>show_documentation()<CR>$/;"	m
K	languageclient.vim	/^    nnoremap <silent> K :call LanguageClient#textDocument_hover()<CR>$/;"	m
LC_maps	languageclient.vim	/^function LC_maps()$/;"	f
LanguageClient_config	languageclient.vim	/^augroup LanguageClient_config$/;"	a
M	defx.vim	/^  nnoremap <silent><buffer><expr> M defx#do_action('new_multiple_files')$/;"	m
N	defx.vim	/^  nnoremap <silent><buffer><expr> N defx#do_action('new_file')$/;"	m
NERDTreeShowHidden	init_old.vim	/^let NERDTreeShowHidden = 1$/;"	v
NERDTreeShowHidden	nerdtree.vim	/^let NERDTreeShowHidden = 1$/;"	v
Normal Mode:	readme.md	/^# Normal Mode:$/;"	c
OR	coc.vim	/^command! -nargs=0 OR   :call CocAction('runCommand', 'editor.action.organizeImport')$/;"	c
OR	init_old.vim	/^command! -nargs=0 OR   :call     CocAction('runCommand', 'editor.action.organizeImport')$/;"	c
P	clip.vim	/^nmap P <plug>(YoinkPaste_P)$/;"	m
P	defx.vim	/^  nnoremap <silent><buffer><expr> P defx#do_action('open', 'pedit')$/;"	m
Prose	prose.vim	/^function! Prose()$/;"	f
Q	prose.vim	/^  nnoremap <buffer> <silent> Q gqap$/;"	m
Q	prose.vim	/^  xnoremap <buffer> <silent> Q gq$/;"	m
R	defx.vim	/^  nnoremap <silent><buffer><expr> R defx#do_action('redraw')$/;"	m
S	clip.vim	/^nmap S <plug>(SubversiveSubstituteToEndOfLine)$/;"	m
S	defx.vim	/^  nnoremap <silent><buffer><expr> S defx#do_action('toggle_sort', 'time')$/;"	m
StructToGQL	init_old.vim	/^command! -nargs=0 StructToGQL %s\/\\s\\+\\w\\+\\s\\+\\(.\\)\\(.\\+\\)\\s\\+`json:"\\(.\\+\\)"`\//;"	c
ToggleSymbolHover	coc.vim	/^function! ToggleSymbolHover()$/;"	f
X	clip.vim	/^nnoremap X D$/;"	m
[F	fzf.vim	/^nnoremap <silent> [F :call fzf#run({$/;"	m
[T	fzf.vim	/^nnoremap <silent> [T :call fzf#run({$/;"	m
[f	fzf.vim	/^nnoremap [f :Rg <c-r><c-w><cr>$/;"	m
[g	init_old.vim	/^nmap <silent> [g <Plug>(coc-diagnostic-prev)$/;"	m
[o	fzf.vim	/^nmap <silent> [o :Files<cr>$/;"	m
[t	fzf.vim	/^nmap [t :Tags <c-r><c-w><CR> $/;"	m
[w	base.vim	/^nnoremap [w :setlocal nowrap<cr>$/;"	m
[y	clip.vim	/^nmap [y <plug>(YoinkRotateBack)$/;"	m
\x21	defx.vim	/^  nnoremap <silent><buffer><expr> ! defx#do_action('execute_command')$/;"	m
]F	fzf.vim	/^nnoremap <silent> ]F :call fzf#run({$/;"	m
]f	fzf.vim	/^nnoremap ]f :Rg $/;"	m
]g	init_old.vim	/^nmap <silent> ]g <Plug>(coc-diagnostic-next)$/;"	m
]t	fzf.vim	/^nmap ]t :Tags<CR>$/;"	m
]w	base.vim	/^nnoremap ]w :setlocal wrap<cr>$/;"	m
]y	clip.vim	/^nmap ]y <plug>(YoinkRotateForward)$/;"	m
_	base.vim	/^nnoremap <silent> _ :res -5<cr>:vertical resize -5<cr>$/;"	m
af	init_old.vim	/^omap af <Plug>(coc-funcobj-a)$/;"	m
af	init_old.vim	/^xmap af <Plug>(coc-funcobj-a)$/;"	m
args	coc-settings.json	/^      "args": ["--stdio"],$/;"	a	object:languageserver.intelephense
args	coc-settings.json	/^      "args": ["start"],$/;"	a	object:languageserver.bash
bash	coc-settings.json	/^    "bash": {$/;"	o	object:languageserver
c	defx.vim	/^  nnoremap <silent><buffer><expr> c defx#do_action('copy')$/;"	m
cache	coc-settings.json	/^        "cache": {$/;"	o	object:languageserver.ccls.initializationOptions
ccls	coc-settings.json	/^    "ccls": {$/;"	o	object:languageserver
cd	defx.vim	/^  nnoremap <silent><buffer><expr> cd defx#do_action('change_vim_cwd')$/;"	m
clang	coc-settings.json	/^        "clang": {$/;"	o	object:languageserver.ccls.initializationOptions
coc.preferences.enableFloatHighlight	coc-settings.json	/^  "coc.preferences.enableFloatHighlight": true,$/;"	b
coc.preferences.formatOnInsertLeave	coc-settings.json	/^  "coc.preferences.formatOnInsertLeave": true,$/;"	b
coc.preferences.formatOnSaveFiletypes	coc-settings.json	/^  "coc.preferences.formatOnSaveFiletypes": [$/;"	a
coc.preferences.formatOnType	coc-settings.json	/^  "coc.preferences.formatOnType": true,$/;"	b
coc.preferences.hoverTarget	coc-settings.json	/^  "coc.preferences.hoverTarget": "float",$/;"	s
coc.source.emoji.filetypes	coc-settings.json	/^  "coc.source.emoji.filetypes": ["markdown"],$/;"	a
coc.source.emoji.priority	coc-settings.json	/^  "coc.source.emoji.priority": 1$/;"	n
coc.source.file.ignoreHidden	coc-settings.json	/^  "coc.source.file.ignoreHidden": false,$/;"	b
coc.source.ultisnips.priority	coc-settings.json	/^  "coc.source.ultisnips.priority": 100,$/;"	n
coc_autos	coc.vim	/^augroup coc_autos$/;"	a
codeLens.enable	coc-settings.json	/^  "codeLens.enable": true,$/;"	b
codeLens.separator	coc-settings.json	/^  "codeLens.separator": "⬅",$/;"	s
command	coc-settings.json	/^      "command": "bash-language-server",$/;"	s	object:languageserver.bash
command	coc-settings.json	/^      "command": "ccls",$/;"	s	object:languageserver.ccls
command	coc-settings.json	/^      "command": "intelephense",$/;"	s	object:languageserver.intelephense
completeUnimported	coc-settings.json	/^    "completeUnimported": true,$/;"	b	object:go.goplsOptions
completeUnimported	languageclient.json	/^    "completeUnimported": true,$/;"	b	object:gopls
completionDocumentation	coc-settings.json	/^    "completionDocumentation": true,$/;"	b	object:go.goplsOptions
config_of_ncm2	ncm2.vim	/^augroup config_of_ncm2$/;"	a
d	defx.vim	/^  nnoremap <silent><buffer><expr> d defx#do_action('remove')$/;"	m
deepCompletion	coc-settings.json	/^    "deepCompletion": true,$/;"	b	object:go.goplsOptions
defx	defx.vim	/^augroup defx$/;"	a
delimitMate_autoclose	init_old.vim	/^let delimitMate_autoclose = 0$/;"	v
delimitMate_balance_matchpairs	delimitMate.vim	/^let delimitMate_balance_matchpairs = 1$/;"	v
delimitMate_expand_cr	delimitMate.vim	/^let delimitMate_expand_cr = 1$/;"	v
delimitMate_expand_cr	init_old.vim	/^let delimitMate_expand_cr = 1$/;"	v
delimitMate_expand_space	init_old.vim	/^let delimitMate_expand_space = 1$/;"	v
delimitMate_jump_expansion	delimitMate.vim	/^let delimitMate_jump_expansion = 1$/;"	v
dependencies	package-lock.json	/^  "dependencies": {$/;"	o
diagnostic.checkCurrentLine	coc-settings.json	/^  "diagnostic.checkCurrentLine": false,$/;"	b
diagnostic.displayByAle	coc-settings.json	/^  "diagnostic.displayByAle": false,$/;"	b
diagnostic.enable	coc-settings.json	/^  "diagnostic.enable": true,$/;"	b
diagnostic.errorSign	coc-settings.json	/^  "diagnostic.errorSign": "❌",$/;"	s
diagnostic.highlightOffset	coc-settings.json	/^  "diagnostic.highlightOffset": 1000,$/;"	n
diagnostic.hintSign	coc-settings.json	/^  "diagnostic.hintSign": "❔",$/;"	s
diagnostic.infoSign	coc-settings.json	/^  "diagnostic.infoSign": "🌟",$/;"	s
diagnostic.level	coc-settings.json	/^  "diagnostic.level": "information",$/;"	s
diagnostic.locationlist	coc-settings.json	/^  "diagnostic.locationlist": true,$/;"	b
diagnostic.messageDelay	coc-settings.json	/^  "diagnostic.messageDelay": 500,$/;"	n
diagnostic.messageTarget	coc-settings.json	/^  "diagnostic.messageTarget": "float",$/;"	s
diagnostic.refreshOnInsertMode	coc-settings.json	/^  "diagnostic.refreshOnInsertMode": true,$/;"	b
diagnostic.virtualText	coc-settings.json	/^  "diagnostic.virtualText": true,$/;"	b
diagnostic.virtualTextLineSeparator	coc-settings.json	/^  "diagnostic.virtualTextLineSeparator": "🔻",$/;"	s
diagnostic.virtualTextLines	coc-settings.json	/^  "diagnostic.virtualTextLines": 3,$/;"	n
diagnostic.virtualTextPrefix	coc-settings.json	/^  "diagnostic.virtualTextPrefix": "🔧 ",$/;"	s
diagnostic.warningSign	coc-settings.json	/^  "diagnostic.warningSign": "⚡",$/;"	s
directory	coc-settings.json	/^          "directory": "\/tmp\/ccls"$/;"	s	object:languageserver.ccls.initializationOptions.cache
e	defx.vim	/^  nnoremap <silent><buffer><expr> e defx#do_action('open', 'vsplit')$/;"	m
extraArgs	coc-settings.json	/^          "extraArgs": [$/;"	a	object:languageserver.ccls.initializationOptions.clang
filetypes	coc-settings.json	/^      "filetypes": ["c", "cpp", "objc", "objcpp"],$/;"	a	object:languageserver.ccls
filetypes	coc-settings.json	/^      "filetypes": ["php"],$/;"	a	object:languageserver.intelephense
filetypes	coc-settings.json	/^      "filetypes": ["sh"],$/;"	a	object:languageserver.bash
fs	base.vim	/^cmap fs w! !sudo tee > \/dev\/null %$/;"	m
fuzzyMatching	coc-settings.json	/^    "fuzzyMatching": true$/;"	b	object:go.goplsOptions
g:EasyClipAutoFormat	easyclip.vim	/^let g:EasyClipAutoFormat = 1 $/;"	v
g:EasyClipShareYanks	easyclip.vim	/^let g:EasyClipShareYanks = 1$/;"	v
g:EasyClipUseCutDefaults	easyclip.vim	/^let g:EasyClipUseCutDefaults = 1$/;"	v
g:EasyClipUsePasteToggleDefaults	easyclip.vim	/^let g:EasyClipUsePasteToggleDefaults = 1$/;"	v
g:EasyClipUseSubstituteDefaults	easyclip.vim	/^let g:EasyClipUseSubstituteDefaults = 1$/;"	v
g:EditorConfig_exclude_patterns	init.vim	/^let g:EditorConfig_exclude_patterns = ['fugitive:\/\/.*']$/;"	v
g:LanguaClient_settingsPath	languageclient.vim	/^let g:LanguaClient_settingsPath = "\/home\/tigor\/.config\/nvim\/languageclient.json"$/;"	v
g:LanguageClient_completionPreferTextEdit	languageclient.vim	/^let g:LanguageClient_completionPreferTextEdit = 1$/;"	v
g:LanguageClient_hoverPreview	languageclient.vim	/^let g:LanguageClient_hoverPreview = "Always"$/;"	v
g:LanguageClient_loadSettings	languageclient.vim	/^let g:LanguageClient_loadSettings = 1$/;"	v
g:LanguageClient_serverCommands	languageclient.vim	/^let g:LanguageClient_serverCommands = {$/;"	v
g:LanguageClient_useVirtualText	languageclient.vim	/^let g:LanguageClient_useVirtualText = "All"$/;"	v
g:NERDTreeWinSize	init_old.vim	/^let g:NERDTreeWinSize=40$/;"	v
g:ToggleSymbolHover	coc.vim	/^    let g:ToggleSymbolHover = !get(g:, 'ToggleSymbolHover', 1)$/;"	v
g:UltiSnipsEditSplit	init_old.vim	/^let g:UltiSnipsEditSplit="vertical"$/;"	v
g:UltiSnipsExpandTrigger	init_old.vim	/^let g:UltiSnipsExpandTrigger = "<nop>"$/;"	v
g:UltiSnipsExpandTrigger	ultisnips.vim	/^let g:UltiSnipsExpandTrigger = "<Plug>(ultisnips_expand)"$/;"	v
g:UltiSnipsExpandTrigger	ultisnips.vim	/^let g:UltiSnipsExpandTrigger = "<c-l>"$/;"	v
g:UltiSnipsJumpBackwardTrigger	ultisnips.vim	/^let g:UltiSnipsJumpBackwardTrigger	= "<c-k>"$/;"	v
g:UltiSnipsJumpForwardTrigger	ultisnips.vim	/^let g:UltiSnipsJumpForwardTrigger	= "<c-j>"$/;"	v
g:UltiSnipsRemoveSelectModeMappings	ultisnips.vim	/^let g:UltiSnipsRemoveSelectModeMappings = 0$/;"	v
g:afterglow_italic_comments	init_old.vim	/^let g:afterglow_italic_comments=1$/;"	v
g:airline#extensions#default#section_truncate_width	init_old.vim	/^let g:airline#extensions#default#section_truncate_width = {$/;"	v
g:airline#extensions#tabline#enabled	airline.vim	/^let g:airline#extensions#tabline#enabled = 1$/;"	v
g:airline_left_alt_sep	init_old.vim	/^let g:airline_left_alt_sep = ''$/;"	v
g:airline_left_sep	init_old.vim	/^let g:airline_left_sep = '»'$/;"	v
g:airline_left_sep	init_old.vim	/^let g:airline_left_sep = '▶'$/;"	v
g:airline_left_sep	init_old.vim	/^let g:airline_left_sep = ''$/;"	v
g:airline_powerline_fonts	airline.vim	/^let g:airline_powerline_fonts = 1$/;"	v
g:airline_powerline_fonts	init_old.vim	/^let g:airline_powerline_fonts = 1$/;"	v
g:airline_right_alt_sep	init_old.vim	/^let g:airline_right_alt_sep = ''$/;"	v
g:airline_right_sep	init_old.vim	/^let g:airline_right_sep = '«'$/;"	v
g:airline_right_sep	init_old.vim	/^let g:airline_right_sep = '◀'$/;"	v
g:airline_right_sep	init_old.vim	/^let g:airline_right_sep = ''$/;"	v
g:airline_section_z	init_old.vim	/^let g:airline_section_z="%l:%c"$/;"	v
g:airline_skip_empty_sections	init_old.vim	/^let g:airline_skip_empty_sections = 1$/;"	v
g:airline_solarized_bg	init_old.vim	/^let g:airline_solarized_bg='dark'$/;"	v
g:airline_symbols	init_old.vim	/^let g:airline_symbols = {}$/;"	v
g:airline_symbols	init_old.vim	/^let g:airline_symbols.branch = '⎇'$/;"	v
g:airline_symbols	init_old.vim	/^let g:airline_symbols.branch = ''$/;"	v
g:airline_symbols	init_old.vim	/^let g:airline_symbols.linenr = '¶'$/;"	v
g:airline_symbols	init_old.vim	/^let g:airline_symbols.linenr = '␊'$/;"	v
g:airline_symbols	init_old.vim	/^let g:airline_symbols.linenr = '␤'$/;"	v
g:airline_symbols	init_old.vim	/^let g:airline_symbols.linenr = ''$/;"	v
g:airline_symbols	init_old.vim	/^let g:airline_symbols.paste = 'Þ'$/;"	v
g:airline_symbols	init_old.vim	/^let g:airline_symbols.paste = 'ρ'$/;"	v
g:airline_symbols	init_old.vim	/^let g:airline_symbols.paste = '∥'$/;"	v
g:airline_symbols	init_old.vim	/^let g:airline_symbols.readonly = ''$/;"	v
g:airline_symbols	init_old.vim	/^let g:airline_symbols.whitespace = 'Ξ'$/;"	v
g:airline_theme	autoload/theme.vim	/^let g:airline_theme='gruvbox'$/;"	v
g:airline_theme	init_old.vim	/^let g:airline_theme='gruvbox'$/;"	v
g:ale_completion_tsserver_autoimport	ale.vim	/^let g:ale_completion_tsserver_autoimport = 1$/;"	v
g:ale_fix_on_save	ale.vim	/^let g:ale_fix_on_save = 1$/;"	v
g:ale_fixers	ale.vim	/^let g:ale_fixers = {$/;"	v
g:ale_lint_on_enter	ale.vim	/^let g:ale_lint_on_enter = 1$/;"	v
g:ale_lint_on_text_changed	ale.vim	/^let g:ale_lint_on_text_changed = 1$/;"	v
g:ale_linters	ale.vim	/^let g:ale_linters = {'rust': ['rls']}$/;"	v
g:ale_sign_error	ale.vim	/^let g:ale_sign_error = '❌'$/;"	v
g:ale_sign_highlight_linenrs	ale.vim	/^let g:ale_sign_highlight_linenrs = 1$/;"	v
g:ale_sign_info	ale.vim	/^let g:ale_sign_info = '🔧'$/;"	v
g:ale_sign_warning	ale.vim	/^let g:ale_sign_warning = '⚡'$/;"	v
g:ale_virtualtext_cursor	ale.vim	/^let g:ale_virtualtext_cursor = 1$/;"	v
g:ale_virtualtext_prefix	ale.vim	/^let g:ale_virtualtext_prefix = '🔧 '$/;"	v
g:coc_global_extensions	coc.vim	/^let g:coc_global_extensions = [$/;"	v
g:coc_snippet_next	coc.vim	/^let g:coc_snippet_next = '<c-j>'$/;"	v
g:coc_snippet_next	init_old.vim	/^let g:coc_snippet_next = '<c-j>'$/;"	v
g:coc_snippet_next	init_old.vim	/^let g:coc_snippet_next = '<tab>'$/;"	v
g:coc_snippet_prev	coc.vim	/^let g:coc_snippet_prev = '<c-k>'$/;"	v
g:coc_snippet_prev	init_old.vim	/^let g:coc_snippet_prev = '<c-k>'$/;"	v
g:ctrlp_cmd	ctrlp.vim	/^let g:ctrlp_cmd = 'CtrlP'$/;"	v
g:ctrlp_cmd	init_old.vim	/^let g:ctrlp_cmd = 'CtrlP'$/;"	v
g:ctrlp_map	ctrlp.vim	/^let g:ctrlp_map = '<c-p>'$/;"	v
g:ctrlp_map	init_old.vim	/^let g:ctrlp_map = '<c-p>'$/;"	v
g:ctrlp_root_markers	ctrlp.vim	/^let g:ctrlp_root_markers = ['pom.xml', '.p4ignore', '.yaml', 'package.json', 'cargo.toml', 'go.m/;"	v
g:ctrlp_root_markers	init_old.vim	/^let g:ctrlp_root_markers = ['pom.xml', '.p4ignore', '.yaml', 'package.json', 'cargo.toml', 'go.m/;"	v
g:ctrlp_user_command	ctrlp.vim	/^let g:ctrlp_user_command = ['.git', 'cd %s && git ls-files -co --exclude-standard']$/;"	v
g:ctrlp_user_command	init_old.vim	/^let g:ctrlp_user_command = ['.git', 'cd %s && git ls-files -co --exclude-standard']$/;"	v
g:ctrlp_working_path_mode	ctrlp.vim	/^let g:ctrlp_working_path_mode = 'ra'$/;"	v
g:ctrlp_working_path_mode	init_old.vim	/^let g:ctrlp_working_path_mode = 'ra'$/;"	v
g:deoplete#enable_at_startup	deoplete.vim	/^let g:deoplete#enable_at_startup = 1$/;"	v
g:echodoc#enable_at_startup	deoplete.vim	/^let g:echodoc#enable_at_startup = 1$/;"	v
g:echodoc#enable_at_startup	echodoc.vim	/^let g:echodoc#enable_at_startup = 1$/;"	v
g:echodoc#type	deoplete.vim	/^let g:echodoc#type = "floating"$/;"	v
g:echodoc#type	echodoc.vim	/^let g:echodoc#type = 'floating'$/;"	v
g:fern#default_hidden	fern.vim	/^let g:fern#default_hidden = 1$/;"	v
g:fern#drawer_width	fern.vim	/^let g:fern#drawer_width = 40$/;"	v
g:fern#renderer	fern.vim	/^let g:fern#renderer = "devicons"$/;"	v
g:float_preview#docked	ncm2.vim	/^let g:float_preview#docked = 1$/;"	v
g:go_auto_type_info	init_old.vim	/^let g:go_auto_type_info = 0$/;"	v
g:go_code_completion_enabled	vimgo.vim	/^let g:go_code_completion_enabled = 0$/;"	v
g:go_def_mapping_enabled	init_old.vim	/^let g:go_def_mapping_enabled = 0$/;"	v
g:go_def_mapping_enabled	vimgo.vim	/^let g:go_def_mapping_enabled = 0$/;"	v
g:go_diagnostics_enabled	vimgo.vim	/^let g:go_diagnostics_enabled = 1$/;"	v
g:go_doc_keywordprg_enabled	vimgo.vim	/^let g:go_doc_keywordprg_enabled = 0$/;"	v
g:go_doc_popup_window	vimgo.vim	/^let g:go_doc_popup_window = 1$/;"	v
g:go_echo_go_info	vimgo.vim	/^let g:go_echo_go_info = 0$/;"	v
g:go_fmt_autosave	vimgo.vim	/^let g:go_fmt_autosave = 0$/;"	v
g:go_fmt_autosave	vimgo.vim	/^let g:go_fmt_autosave = 1$/;"	v
g:go_fmt_command	init_old.vim	/^let g:go_fmt_command = "goimports"$/;"	v
g:go_fmt_command	vimgo.vim	/^let g:go_fmt_command = "goimports"$/;"	v
g:go_fold_enable	init_old.vim	/^let g:go_fold_enable = ['block', 'import', 'varconst', 'package_comment']$/;"	v
g:go_gopls_complete_unimported	vimgo.vim	/^let g:go_gopls_complete_unimported = 1$/;"	v
g:go_gopls_deep_completion	vimgo.vim	/^let g:go_gopls_deep_completion = 1$/;"	v
g:go_gopls_enabled	vimgo.vim	/^let g:go_gopls_enabled = 0$/;"	v
g:go_gopls_fuzzy_matching	vimgo.vim	/^let g:go_gopls_fuzzy_matching = 1$/;"	v
g:go_gopls_staticcheck	vimgo.vim	/^let g:go_gopls_staticcheck = 1$/;"	v
g:go_gopls_use_placeholders	vimgo.vim	/^let g:go_gopls_use_placeholders = 1 $/;"	v
g:go_highlight_array_whitespace_error	init_old.vim	/^let g:go_highlight_array_whitespace_error = 1$/;"	v
g:go_highlight_build_constraints	init_old.vim	/^let g:go_highlight_build_constraints = 1$/;"	v
g:go_highlight_build_constraints	vimgo.vim	/^let g:go_highlight_build_constraints = 1$/;"	v
g:go_highlight_chan_whitespace_error	init_old.vim	/^let g:go_highlight_chan_whitespace_error = 1$/;"	v
g:go_highlight_diagnostic_errors	vimgo.vim	/^let g:go_highlight_diagnostic_errors = 1$/;"	v
g:go_highlight_extra_types	init_old.vim	/^let g:go_highlight_extra_types = 1$/;"	v
g:go_highlight_extra_types	vimgo.vim	/^let g:go_highlight_extra_types = 1$/;"	v
g:go_highlight_fields	init_old.vim	/^let g:go_highlight_fields = 1$/;"	v
g:go_highlight_fields	vimgo.vim	/^let g:go_highlight_fields = 1$/;"	v
g:go_highlight_function_calls	init_old.vim	/^let g:go_highlight_function_calls = 1$/;"	v
g:go_highlight_function_calls	vimgo.vim	/^let g:go_highlight_function_calls = 1$/;"	v
g:go_highlight_function_parameters	init_old.vim	/^let g:go_highlight_function_parameters = 1$/;"	v
g:go_highlight_function_parameters	vimgo.vim	/^let g:go_highlight_function_parameters = 1$/;"	v
g:go_highlight_functions	init_old.vim	/^let g:go_highlight_functions = 1$/;"	v
g:go_highlight_functions	vimgo.vim	/^let g:go_highlight_functions = 1$/;"	v
g:go_highlight_generate_tags	init_old.vim	/^let g:go_highlight_generate_tags = 1$/;"	v
g:go_highlight_generate_tags	vimgo.vim	/^let g:go_highlight_generate_tags = 1$/;"	v
g:go_highlight_operators	init_old.vim	/^let g:go_highlight_operators = 1$/;"	v
g:go_highlight_operators	vimgo.vim	/^let g:go_highlight_operators = 1$/;"	v
g:go_highlight_space_tab_error	init_old.vim	/^let g:go_highlight_space_tab_error = 1$/;"	v
g:go_highlight_trailing_whitespace_error	init_old.vim	/^let g:go_highlight_trailing_whitespace_error = 1$/;"	v
g:go_highlight_types	init_old.vim	/^let g:go_highlight_types = 1$/;"	v
g:go_highlight_types	vimgo.vim	/^let g:go_highlight_types = 1$/;"	v
g:go_highlight_variable_assignments	init_old.vim	/^let g:go_highlight_variable_assignments = 1$/;"	v
g:go_highlight_variable_assignments	vimgo.vim	/^let g:go_highlight_variable_assignments = 1$/;"	v
g:go_highlight_variable_declarations	init_old.vim	/^let g:go_highlight_variable_declarations = 1$/;"	v
g:go_highlight_variable_declarations	vimgo.vim	/^let g:go_highlight_variable_declarations = 1$/;"	v
g:go_metalinter_autosave	init_old.vim	/^let g:go_metalinter_autosave = 0$/;"	v
g:go_snippet_engine	vimgo.vim	/^let g:go_snippet_engine = ''$/;"	v
g:gruvbox_italic	gruvbox.vim	/^let g:gruvbox_italic=1$/;"	v
g:gutentags_file_list_command	gutentags.vim	/^let g:gutentags_file_list_command = {$/;"	v
g:instant_markdown_allow_unsafe_content	instantmarkdown.vim	/^let g:instant_markdown_allow_unsafe_content = 1$/;"	v
g:instant_markdown_browser	instantmarkdown.vim	/^let g:instant_markdown_browser = "firefox --new-window"$/;"	v
g:instant_markdown_open_to_the_world	instantmarkdown.vim	/^let g:instant_markdown_open_to_the_world = 1$/;"	v
g:instant_markdown_port	instantmarkdown.vim	/^let g:instant_markdown_port = 10000$/;"	v
g:javascript_plugin_flow	init_old.vim	/^let g:javascript_plugin_flow = 1$/;"	v
g:javascript_plugin_jsdoc	init_old.vim	/^let g:javascript_plugin_jsdoc = 1$/;"	v
g:javascript_plugin_ngdoc	init_old.vim	/^let g:javascript_plugin_ngdoc = 1$/;"	v
g:lexical#dictionary	lexical.vim	/^let g:lexical#dictionary = ['\/usr\/share\/dict\/words',]$/;"	v
g:lexical#dictionary	prose.vim	/^  let g:lexical#dictionary = ['\/usr\/share\/dict\/words',]$/;"	v
g:lexical#spell	lexical.vim	/^let g:lexical#spell = 1$/;"	v
g:lexical#spell	prose.vim	/^  let g:lexical#spell = 1$/;"	v
g:lexical#spelllang	lexical.vim	/^let g:lexical#spelllang = ['en_us','id_ID',]$/;"	v
g:lexical#spelllang	prose.vim	/^  let g:lexical#spelllang = ['en_us','id_ID',]$/;"	v
g:lexical#thesaurus	lexical.vim	/^let g:lexical#thesaurus = ['~\/.config\/nvim\/thesaurus\/words.txt']$/;"	v
g:lexical#thesaurus	prose.vim	/^  let g:lexical#thesaurus = ['~\/.config\/nvim\/thesaurus\/words.txt']$/;"	v
g:ncm2#popup_limit	ncm2.vim	/^let g:ncm2#popup_limit = 10$/;"	v
g:ncm2#total_popup_limit	ncm2.vim	/^let g:ncm2#total_popup_limit = 20$/;"	v
g:pencil#wrapModeDefault	pencil.vim	/^let g:pencil#wrapModeDefault = 'soft'$/;"	v
g:pencil#wrapModeDefault	prose.vim	/^  let g:pencil#wrapModeDefault = 'soft'$/;"	v
g:rustfmt_autosave	init_old.vim	/^let g:rustfmt_autosave = 1$/;"	v
g:syntastic_always_populate_loc_list	init_old.vim	/^let g:syntastic_always_populate_loc_list = 1$/;"	v
g:syntastic_auto_loc_list	init_old.vim	/^let g:syntastic_auto_loc_list = 1$/;"	v
g:syntastic_check_on_open	init_old.vim	/^let g:syntastic_check_on_open = 1$/;"	v
g:syntastic_check_on_wq	init_old.vim	/^let g:syntastic_check_on_wq = 0$/;"	v
g:textobj#quote#doubleMotion	prose.vim	/^  let g:textobj#quote#doubleMotion = 'q'$/;"	v
g:textobj#quote#singleMotion	prose.vim	/^  let g:textobj#quote#singleMotion = 'Q'$/;"	v
g:yoinkAutoFormatPaste	clip.vim	/^let g:yoinkAutoFormatPaste = 1$/;"	v
g:yoinkIncludeDeleteOperations	clip.vim	/^let g:yoinkIncludeDeleteOperations = 1$/;"	v
g:yoinkSavePersistently	clip.vim	/^let g:yoinkSavePersistently = 1$/;"	v
gE	ale.vim	/^nmap <silent> gE <Plug>(ale_previous_wrap)$/;"	m
gE	coc.vim	/^nmap <silent> gE <Plug>(coc-diagnostic-prev)$/;"	m
ga	coc.vim	/^nmap <silent> ga <Plug>(coc-codelens-action)$/;"	m
ga	init_old.vim	/^nmap <silent> ga <Plug>(coc-codelens-action)$/;"	m
ga	languageclient.vim	/^    nnoremap <silent> ga :call LanguageClient#handleCodeLensAction()<CR>$/;"	m
gd	coc.vim	/^nmap <silent> gd <Plug>(coc-definition)$/;"	m
gd	init_old.vim	/^nmap <silent> gd <Plug>(coc-definition)$/;"	m
gd	languageclient.vim	/^    nnoremap <silent> gd :call LanguageClient#textDocument_definition()<CR>$/;"	m
ge	ale.vim	/^nmap <silent> ge <Plug>(ale_next_wrap)$/;"	m
ge	coc.vim	/^nmap <silent> ge <Plug>(coc-diagnostic-next)$/;"	m
get_initials_low	pythonx/utils.py	/^def get_initials_low(str):$/;"	f
gi	coc.vim	/^nmap <silent> gi <Plug>(coc-implementation)$/;"	m
gi	init_old.vim	/^nmap <silent> gi <Plug>(coc-implementation)$/;"	m
gi	languageclient.vim	/^    nnoremap <silent> gi :call LanguageClient#textDocument_hover()<CR>$/;"	m
gm	easyclip.vim	/^nnoremap gm m$/;"	m
gm	fzf.vim	/^nmap gm :Marks<CR>$/;"	m
go.enable	coc-settings.json	/^  "go.enable": true,$/;"	b
go.goplsOptions	coc-settings.json	/^  "go.goplsOptions": {$/;"	o
gopls	languageclient.json	/^  "gopls": {$/;"	o
gopls.completeUnimported	languageclient.json	/^  "gopls.completeUnimported": true,$/;"	b
gopls.hoverKind	languageclient.json	/^  "gopls.hoverKind": "FullDocumentation",$/;"	s
gopls.linkTarget	languageclient.json	/^  "gopls.linkTarget": ""$/;"	s
gopls.usePlaceholders	languageclient.json	/^  "gopls.usePlaceholders": true,$/;"	b
gr	coc.vim	/^nmap <silent> gr <Plug>(coc-references)$/;"	m
gr	init_old.vim	/^nmap <silent> gr <Plug>(coc-references)$/;"	m
gy	coc.vim	/^nmap <silent> gy <Plug>(coc-type-definition)$/;"	m
gy	init_old.vim	/^nmap <silent> gy <Plug>(coc-type-definition)$/;"	m
h	defx.vim	/^  nnoremap <silent><buffer><expr> h defx#do_action('cd', ['..'])$/;"	m
hoverKind	coc-settings.json	/^    "hoverKind": "FullDocumentation",$/;"	s	object:go.goplsOptions
hoverKind	languageclient.json	/^    "hoverKind": "FullDocumentation",$/;"	s	object:gopls
if	init_old.vim	/^omap if <Plug>(coc-funcobj-i)$/;"	m
if	init_old.vim	/^xmap if <Plug>(coc-funcobj-i)$/;"	m
ignoredRootPaths	coc-settings.json	/^      "ignoredRootPaths": ["~"]$/;"	a	object:languageserver.bash
initializationOptions	coc-settings.json	/^      "initializationOptions": {$/;"	o	object:languageserver.ccls
initializationOptions	coc-settings.json	/^      "initializationOptions": {$/;"	o	object:languageserver.intelephense
integrity	package-lock.json	/^      "integrity": "sha512-KMHP\/Jq53jZKTY9iTUt3dIVl\/be6UPs2INo96+BnZHLKxYNTfwMmlgHTaMWyGZoO74R/;"	s	object:dependencies.yarn
intelephense	coc-settings.json	/^    "intelephense": {$/;"	o	object:languageserver
jj	base.vim	/^cnoremap jj <c-c><esc>$/;"	m
jj	base.vim	/^inoremap jj <esc>$/;"	m
kk	base.vim	/^cnoremap kk <c-c><esc>$/;"	m
kk	base.vim	/^inoremap kk <esc>$/;"	m
l	defx.vim	/^  nnoremap <silent><buffer><expr> l defx#do_action('open')$/;"	m
languageserver	coc-settings.json	/^  "languageserver": $/;"	o
lexical	lexical.vim	/^augroup lexical$/;"	a
linkTarget	coc-settings.json	/^    "linkTarget": "",$/;"	s	object:go.goplsOptions
linkTarget	languageclient.json	/^    "linkTarget": ""$/;"	s	object:gopls
litecorrect	litecorrect.vim	/^augroup litecorrect$/;"	a
lockfileVersion	package-lock.json	/^  "lockfileVersion": 1,$/;"	n
m	clip.vim	/^nnoremap m m$/;"	m
m	defx.vim	/^  nnoremap <silent><buffer><expr> m defx#do_action('move')$/;"	m
mapleader	base.vim	/^let mapleader = " "$/;"	v
mapleader	init.vim	/^let mapleader = " "$/;"	v
mapleader	init_old.vim	/^let mapleader = "-"$/;"	v
mygroup	init_old.vim	/^augroup mygroup$/;"	a
ncm2autoload	ncm2.vim	/^augroup ncm2autoload$/;"	a
numbertoggle	base.vim	/^augroup numbertoggle$/;"	a
o	defx.vim	/^  nnoremap <silent><buffer><expr> o defx#do_action('open_or_close_tree')$/;"	m
p	clip.vim	/^nmap p <plug>(YoinkPaste_p)$/;"	m
p	defx.vim	/^  nnoremap <silent><buffer><expr> p defx#do_action('paste')$/;"	m
pairs.enableBackspace	coc-settings.json	/^  "pairs.enableBackspace": true,$/;"	b
pencil	pencil.vim	/^augroup pencil$/;"	a
prettier.arrowParens	coc-settings.json	/^  "prettier.arrowParens": "always",$/;"	s
prettier.jsxSingleQuote	coc-settings.json	/^  "prettier.jsxSingleQuote": true,$/;"	b
prettier.printWidth	coc-settings.json	/^  "prettier.printWidth": 80,$/;"	n
prettier.semi	coc-settings.json	/^  "prettier.semi": false,$/;"	b
prettier.singleQuote	coc-settings.json	/^  "prettier.singleQuote": true,$/;"	b
prettier.trailingComma	coc-settings.json	/^  "prettier.trailingComma":"es5",$/;"	s
q	defx.vim	/^  nnoremap <silent><buffer><expr> q defx#do_action('quit')$/;"	m
r	defx.vim	/^  nnoremap <silent><buffer><expr> r defx#do_action('rename')$/;"	m
requires	package-lock.json	/^  "requires": true,$/;"	b
resolved	package-lock.json	/^      "resolved": "https:\/\/registry.npmjs.org\/yarn\/-\/yarn-1.22.0.tgz",$/;"	s	object:dependencies.yarn
resourceDir	coc-settings.json	/^          "resourceDir": "\/Library\/Developer\/CommandLineTools\/usr\/lib\/clang\/11.0.0",$/;"	s	object:languageserver.ccls.initializationOptions.clang
rootPatterns	coc-settings.json	/^      "rootPatterns": [".ccls", "compile_commands.json", ".vim\/", ".git\/", ".hg\/"],$/;"	a	object:languageserver.ccls
s	clip.vim	/^nmap s <plug>(SubversiveSubstitute)$/;"	m
s:buflist	fzf.vim	/^function! s:buflist()$/;"	f
s:bufopen	fzf.vim	/^function! s:bufopen(e)$/;"	f
s:check_back_space	coc.vim	/^function! s:check_back_space() abort$/;"	f
s:check_back_space	init_old.vim	/^function! s:check_back_space() abort$/;"	f
s:defx_my_settings	defx.vim	/^function! s:defx_my_settings() abort$/;"	f
s:show_documentation	init_old.vim	/^function! s:show_documentation()$/;"	f
signature.enable	coc-settings.json	/^  "signature.enable": true,$/;"	b
signature.floatMaxWidth	coc-settings.json	/^  "signature.floatMaxWidth": 100,$/;"	n
snake_case	pythonx/utils.py	/^def snake_case(str):$/;"	f
space_between_camels	pythonx/utils.py	/^def space_between_camels(str):$/;"	f
ss	clip.vim	/^nmap ss <plug>(SubversiveSubstituteLine)$/;"	m
storagePath	coc-settings.json	/^        "storagePath": "\/tmp\/intelephense"$/;"	s	object:languageserver.intelephense.initializationOptions
struct_finder	pythonx/utils.py	/^def struct_finder(buffer, line):$/;"	f
suggest.enablePreselect	coc-settings.json	/^  "suggest.enablePreselect": false,$/;"	b
suggest.floatEnable	coc-settings.json	/^  "suggest.floatEnable": true,$/;"	b
suggest.languageSourcePriority	coc-settings.json	/^  "suggest.languageSourcePriority": 99,$/;"	n
suggest.noselect	coc-settings.json	/^  "suggest.noselect": true,$/;"	b
suggest.numberSelect	coc-settings.json	/^  "suggest.numberSelect": false,$/;"	b
ultisnips_config	ncm2.vim	/^augroup ultisnips_config$/;"	a
usePlaceholders	coc-settings.json	/^    "usePlaceholders": true,$/;"	b	object:go.goplsOptions
usePlaceholders	languageclient.json	/^    "usePlaceholders": true,$/;"	b	object:gopls
user_dict	litecorrect.vim	/^let user_dict = {$/;"	v
version	package-lock.json	/^      "version": "1.22.0",$/;"	s	object:dependencies.yarn
vetur.format.defaultFormatter.html	coc-settings.json	/^  "vetur.format.defaultFormatter.html": "prettier",$/;"	s
vetur.format.enable	coc-settings.json	/^  "vetur.format.enable": true,$/;"	b
vetur.useWorkspaceDependencies	coc-settings.json	/^  "vetur.useWorkspaceDependencies": true,$/;"	b
vetur.validation.script	coc-settings.json	/^  "vetur.validation.script": true,$/;"	b
vetur.validation.template	coc-settings.json	/^  "vetur.validation.template": true,$/;"	b
w!!	init_old.vim	/^cmap w!! w! !sudo tee > \/dev\/null %$/;"	m
x	clip.vim	/^nnoremap x d$/;"	m
x	clip.vim	/^xnoremap x d$/;"	m
x	defx.vim	/^  nnoremap <silent><buffer><expr> x defx#do_action('execute_system')$/;"	m
xx	clip.vim	/^nnoremap xx dd$/;"	m
y	clip.vim	/^nmap y <plug>(YoinkYankPreserveCursorPosition)$/;"	m
y	clip.vim	/^xmap y <plug>(YoinkYankPreserveCursorPosition)$/;"	m
yarn	package-lock.json	/^    "yarn": {$/;"	o	object:dependencies
yy	defx.vim	/^  nnoremap <silent><buffer><expr> yy defx#do_action('yank_path')$/;"	m
~	defx.vim	/^  nnoremap <silent><buffer><expr> ~ defx#do_action('cd')$/;"	m
