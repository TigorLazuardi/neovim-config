!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_OUTPUT_FILESEP	slash	/slash or backslash/
!_TAG_OUTPUT_MODE	u-ctags	/u-ctags or e-ctags/
!_TAG_PROGRAM_AUTHOR	Universal Ctags Team	//
!_TAG_PROGRAM_NAME	Universal Ctags	/Derived from Exuberant Ctags/
!_TAG_PROGRAM_URL	https://ctags.io/	/official site/
!_TAG_PROGRAM_VERSION	0.0.0	/a3c87ab5/
"	surround.vim	/^xmap " S"$/;"	m
$CONFIG	init.vim	/^let $CONFIG = '$HOME\/.config\/nvim'$/;"	v
'	surround.vim	/^xmap ' S'$/;"	m
(	surround.vim	/^xmap ( S)$/;"	m
)	surround.vim	/^xmap ) S)$/;"	m
0	coc-settings.json	/^            "-isystem",$/;"	s	array:languageserver.ccls.initializationOptions.clang.extraArgs
0	coc-settings.json	/^      "args": ["--stdio"],$/;"	s	array:languageserver.intelephense.args
0	coc-settings.json	/^      "args": ["start"],$/;"	s	array:languageserver.bash.args
0	coc-settings.json	/^      "filetypes": ["c", "cpp", "objc", "objcpp"],$/;"	s	array:languageserver.ccls.filetypes
0	coc-settings.json	/^      "filetypes": ["go"],$/;"	s	array:languageserver.golang.filetypes
0	coc-settings.json	/^      "filetypes": ["php"],$/;"	s	array:languageserver.intelephense.filetypes
0	coc-settings.json	/^      "filetypes": ["sh"],$/;"	s	array:languageserver.bash.filetypes
0	coc-settings.json	/^      "ignoredRootPaths": ["~"]$/;"	s	array:languageserver.bash.ignoredRootPaths
0	coc-settings.json	/^      "rootPatterns": [".ccls", "compile_commands.json", ".vim\/", ".git\/", ".hg\/"],$/;"	s	array:languageserver.ccls.rootPatterns
0	coc-settings.json	/^      "rootPatterns": ["go.mod", ".vim\/", ".git\/", ".hg\/"]$/;"	s	array:languageserver.golang.rootPatterns
0	coc-settings.json	/^    "css",$/;"	s	array:coc.preferences.formatOnSaveFiletypes
0	coc-settings.json	/^  "coc.source.emoji.filetypes": ["markdown"],$/;"	s	array:coc.source.emoji.filetypes
1	coc-settings.json	/^            "\/Library\/Developer\/CommandLineTools\/usr\/include\/c++\/v1",$/;"	s	array:languageserver.ccls.initializationOptions.clang.extraArgs
1	coc-settings.json	/^      "filetypes": ["c", "cpp", "objc", "objcpp"],$/;"	s	array:languageserver.ccls.filetypes
1	coc-settings.json	/^      "rootPatterns": [".ccls", "compile_commands.json", ".vim\/", ".git\/", ".hg\/"],$/;"	s	array:languageserver.ccls.rootPatterns
1	coc-settings.json	/^      "rootPatterns": ["go.mod", ".vim\/", ".git\/", ".hg\/"]$/;"	s	array:languageserver.golang.rootPatterns
1	coc-settings.json	/^    "Markdown",$/;"	s	array:coc.preferences.formatOnSaveFiletypes
10	coc-settings.json	/^    "go",$/;"	s	array:coc.preferences.formatOnSaveFiletypes
11	coc-settings.json	/^    "yaml",$/;"	s	array:coc.preferences.formatOnSaveFiletypes
12	coc-settings.json	/^    "python",$/;"	s	array:coc.preferences.formatOnSaveFiletypes
13	coc-settings.json	/^    "html",$/;"	s	array:coc.preferences.formatOnSaveFiletypes
14	coc-settings.json	/^    "toml",$/;"	s	array:coc.preferences.formatOnSaveFiletypes
15	coc-settings.json	/^    "dart"$/;"	s	array:coc.preferences.formatOnSaveFiletypes
2	coc-settings.json	/^            "-I",$/;"	s	array:languageserver.ccls.initializationOptions.clang.extraArgs
2	coc-settings.json	/^      "filetypes": ["c", "cpp", "objc", "objcpp"],$/;"	s	array:languageserver.ccls.filetypes
2	coc-settings.json	/^      "rootPatterns": [".ccls", "compile_commands.json", ".vim\/", ".git\/", ".hg\/"],$/;"	s	array:languageserver.ccls.rootPatterns
2	coc-settings.json	/^      "rootPatterns": ["go.mod", ".vim\/", ".git\/", ".hg\/"]$/;"	s	array:languageserver.golang.rootPatterns
2	coc-settings.json	/^    "typescript",$/;"	s	array:coc.preferences.formatOnSaveFiletypes
3	coc-settings.json	/^            "\/Applications\/Xcode.app\/Contents\/Developer\/Platforms\/MacOSX.platform\/Develop/;"	s	array:languageserver.ccls.initializationOptions.clang.extraArgs
3	coc-settings.json	/^      "filetypes": ["c", "cpp", "objc", "objcpp"],$/;"	s	array:languageserver.ccls.filetypes
3	coc-settings.json	/^      "rootPatterns": [".ccls", "compile_commands.json", ".vim\/", ".git\/", ".hg\/"],$/;"	s	array:languageserver.ccls.rootPatterns
3	coc-settings.json	/^      "rootPatterns": ["go.mod", ".vim\/", ".git\/", ".hg\/"]$/;"	s	array:languageserver.golang.rootPatterns
3	coc-settings.json	/^    "javascript",$/;"	s	array:coc.preferences.formatOnSaveFiletypes
4	coc-settings.json	/^      "rootPatterns": [".ccls", "compile_commands.json", ".vim\/", ".git\/", ".hg\/"],$/;"	s	array:languageserver.ccls.rootPatterns
4	coc-settings.json	/^    "typescriptreact",$/;"	s	array:coc.preferences.formatOnSaveFiletypes
5	coc-settings.json	/^    "javascriptreact",$/;"	s	array:coc.preferences.formatOnSaveFiletypes
6	coc-settings.json	/^    "json",$/;"	s	array:coc.preferences.formatOnSaveFiletypes
7	coc-settings.json	/^    "markdown",$/;"	s	array:coc.preferences.formatOnSaveFiletypes
8	coc-settings.json	/^    "vim",$/;"	s	array:coc.preferences.formatOnSaveFiletypes
9	coc-settings.json	/^    "rust",$/;"	s	array:coc.preferences.formatOnSaveFiletypes
;	fzf.vim	/^nmap <silent> ; :Buffers<CR>$/;"	m
<A-j>	base.vim	/^inoremap <A-j> :m .+1<CR>==gi$/;"	m
<A-j>	base.vim	/^nnoremap <A-j> :m .+1<CR>==$/;"	m
<A-j>	base.vim	/^vnoremap <A-j> :m '>+1<CR>gv=gv$/;"	m
<A-j>	init.vim	/^  nnoremap <A-j> :<C-u>m .+1<CR>==$/;"	m
<A-j>	init.vim	/^  vnoremap <A-j> :<C-u>'<,'>m '>+1<CR>gv=gv$/;"	m
<A-k>	base.vim	/^inoremap <A-k> :m .-2<CR>==gi$/;"	m
<A-k>	base.vim	/^nnoremap <A-k> :m .-2<CR>==$/;"	m
<A-k>	base.vim	/^vnoremap <A-k> :m '<-2<CR>gv=gv$/;"	m
<A-k>	init.vim	/^  nnoremap <A-k> :<C-u>m .-2<CR>==$/;"	m
<A-k>	init.vim	/^  vnoremap <A-k> :<C-u>'<,'>m '<-2<CR>gv=gv$/;"	m
<A-n>	base.vim	/^inoremap <silent> <A-n> <esc>:bnext!<cr>$/;"	m
<A-n>	base.vim	/^nnoremap <silent> <A-n> :bnext!<cr>$/;"	m
<A-p>	base.vim	/^inoremap <silent> <A-p> <esc>:bprev!<cr>$/;"	m
<A-p>	base.vim	/^nnoremap <silent> <A-p> :bprev!<cr>$/;"	m
<C-H>	base.vim	/^nnoremap <C-H> <C-W><C-H>$/;"	m
<C-H>	fern.vim	/^  nnoremap <buffer> <C-H> <C-W><C-H>$/;"	m
<C-J>	base.vim	/^nnoremap <C-J> <C-W><C-J>$/;"	m
<C-J>	fern.vim	/^  nnoremap <buffer> <C-J> <C-W><C-J>$/;"	m
<C-K>	base.vim	/^nnoremap <C-K> <C-W><C-K>$/;"	m
<C-K>	fern.vim	/^  nnoremap <buffer> <C-K> <C-W><C-K>$/;"	m
<C-L>	base.vim	/^nnoremap <C-L> <C-W><C-L>$/;"	m
<C-L>	fern.vim	/^  nnoremap <buffer> <C-L> <C-W><C-L>$/;"	m
<C-j>	coc.vim	/^vmap <C-j> <Plug>(coc-snippets-select)$/;"	m
<F10>	ultisnips.vim	/^nnoremap <silent> <F10> :UltiSnipsEdit<CR>$/;"	m
<F11>	base.vim	/^  nmap <silent><F11> :e $HOME\/.config\/nvim\/$/;"	m
<F12>	base.vim	/^  nmap <silent><F12> :source $HOME\/.config\/nvim\/init.vim<CR>:echo "Config reloaded"<CR>$/;"	m
<F2>	coc.vim	/^nmap <F2> <Plug>(coc-rename)$/;"	m
<F3>	fern.vim	/^  nmap <buffer> <F3> <Plug>(fern-action-grep)$/;"	m
<F3>	fzf.vim	/^nmap <silent><F3> :Rg <c-r><c-w><CR>$/;"	m
<F5>	rust.vim	/^    nnoremap <expr><silent><F5> &filetype == "rust" ? ":make run<CR>" :$/;"	m
<F7>	vimgo.vim	/^inoremap <expr><F7> &filetype == "go" ? "\\<esc>:GoFillStruct<CR>i" : "\\<nop>"$/;"	m
<F7>	vimgo.vim	/^nnoremap <expr><F7> &filetype == "go" ? "\\:GoFillStruct<CR>" : "\\<nop>"$/;"	m
<Leader><Enter>	fzf.vim	/^nnoremap <silent> <Leader><Enter> :call fzf#run({$/;"	m
<S-F5>	rust.vim	/^    nnoremap <expr><silent><S-F5> &filetype == "rust" ? ":make test<CR>" : "\\<nop>"$/;"	m
<S-TAB>	coc.vim	/^inoremap <expr><S-TAB> pumvisible() ? "\\<C-p>" : "\\<C-h>"$/;"	m
<S-Tab>	coc.vim	/^inoremap <silent><expr> <S-Tab> pumvisible() ? "\\<c-p>" : "\\<S-Tab>"$/;"	m
<TAB>	coc.vim	/^inoremap <silent><expr> <TAB>$/;"	m
<Tab>	coc.vim	/^inoremap <silent><expr> <Tab> pumvisible() ? "\\<c-n>" : "\\<Tab>"$/;"	m
<c-=>	clip.vim	/^nmap <c-=> <plug>(YoinkPostPasteToggleFormat)$/;"	m
<c-d>	coc.vim	/^inoremap <expr><c-d> coc#util#has_float() && coc#util#float_scrollable() ? coc#util#float_scroll/;"	m
<c-d>	coc.vim	/^nnoremap <expr><c-d> coc#util#has_float() && coc#util#float_scrollable() ? coc#util#float_scroll/;"	m
<c-down>	base.vim	/^nnoremap <silent> <c-down> :res +1<CR>$/;"	m
<c-left>	base.vim	/^nnoremap <silent> <c-left> :vert res -3<CR>$/;"	m
<c-m>	coc.vim	/^imap <c-m> <Plug>(coc-snippets-expand-jump)$/;"	m
<c-m>	coc.vim	/^vmap <c-m> <Plug>(coc-snippets-expand-jump)$/;"	m
<c-n>	clip.vim	/^nmap <c-n> <plug>(YoinkPostPasteSwapBack)$/;"	m
<c-o>	base.vim	/^inoremap <c-o> <esc>A<CR> $/;"	m
<c-p>	clip.vim	/^nmap <c-p> <plug>(YoinkPostPasteSwapForward)$/;"	m
<c-right>	base.vim	/^nnoremap <silent> <c-right> :vert res +3<CR>$/;"	m
<c-s>	prose.vim	/^  inoremap <buffer> <c-s> <c-g>u<Esc>[s1z=`]A<c-g>u$/;"	m
<c-s>	prose.vim	/^  nnoremap <buffer> <c-s> [s1z=<c-o>$/;"	m
<c-space>	coc.vim	/^inoremap <silent><expr> <c-space> coc#refresh()$/;"	m
<c-u>	coc.vim	/^inoremap <expr><c-u> coc#util#has_float() && coc#util#float_scrollable() ? coc#util#float_scroll/;"	m
<c-u>	coc.vim	/^nnoremap <expr><c-u> coc#util#has_float() && coc#util#float_scrollable() ? coc#util#float_scroll/;"	m
<c-up>	base.vim	/^nnoremap <silent> <c-up> :res -1<CR>$/;"	m
<c-y>	coc.vim	/^inoremap <silent><expr> <c-y> pumvisible() ? coc#_select_confirm() : "\\<c-y>"$/;"	m
<cr>	coc.vim	/^inoremap <silent> <cr> <C-g>u<CR><c-r>=coc#on_enter()<CR>$/;"	m
<cr>	coc.vim	/^inoremap <silent><expr> <cr> pumvisible() ? coc#_select_confirm() : $/;"	m
<leader>;	base.vim	/^nmap <leader>; mAA;<esc>`A$/;"	m
<leader>Q	prose.vim	/^  nnoremap <buffer> <silent> <leader>Q vapJgqap$/;"	m
<leader>a	coc.vim	/^nnoremap <silent> <leader>a  :<C-u>CocList diagnostics<cr>$/;"	m
<leader>a	coc.vim	/^xmap <leader>a  <Plug>(coc-codeaction-selected)$/;"	m
<leader>cc	coc.vim	/^nnoremap <silent> <leader>cc  :<C-u>CocList commands<cr>$/;"	m
<leader>ce	coc.vim	/^nnoremap <silent> <leader>ce  :<C-u>CocList extensions<cr>$/;"	m
<leader>cj	coc.vim	/^nnoremap <silent> <leader>cj  :<C-u>CocNext<CR>$/;"	m
<leader>ck	coc.vim	/^nnoremap <silent> <leader>ck  :<C-u>CocPrev<CR>$/;"	m
<leader>co	coc.vim	/^nnoremap <silent> <leader>co  :<C-u>CocList outline<cr>$/;"	m
<leader>cp	coc.vim	/^nnoremap <silent> <leader>cp  :<C-u>CocListResume<CR>$/;"	m
<leader>cy	coc.vim	/^nnoremap <silent> <leader>cy  :<C-u>CocList -I symbols<cr>$/;"	m
<leader>e	fern.vim	/^nnoremap <silent> <leader>e :Fern . -reveal=% -drawer -toggle<CR>$/;"	m
<leader>n	base.vim	/^nmap <leader>n :e %:h\/$/;"	m
<leader>o	fzf.vim	/^nnoremap <silent><leader>o :HFiles<CR>$/;"	m
<leader>s	clip.vim	/^nmap <leader>s <plug>(SubversiveSubstituteRange)$/;"	m
<leader>s	clip.vim	/^xmap <leader>s <plug>(SubversiveSubstituteRange)$/;"	m
<leader>ss	clip.vim	/^nmap <leader>ss <plug>(SubversiveSubstituteWordRange)$/;"	m
<tab>	base.vim	/^xnoremap <tab> <esc>$/;"	m
?	init.vim	/^  nnoremap <silent> ? :<C-u>call VSCodeNotify('workbench.action.findInFiles', { 'query': expand(/;"	m
Check_floating_window_and_doHover	coc.vim	/^function! Check_floating_window_and_doHover()$/;"	f
D	fern.vim	/^  nmap <buffer> D <Plug>(fern-action-remove)$/;"	m
H	base.vim	/^command! -nargs=1 -complete=help H :vert help <args>$/;"	c
HFiles	fzf.vim	/^command! -bang -nargs=? -complete=dir HFiles$/;"	c
K	coc.vim	/^nmap <silent> K :call CocActionAsync('doHover')<CR>$/;"	m
K	init.vim	/^  nnoremap <silent> K :<C-u>call VSCodeNotify('editor.action.showHover')<CR>$/;"	m
Normal Mode:	readme.md	/^# Normal Mode:$/;"	c
P	clip.vim	/^nmap P <plug>(YoinkPaste_P)$/;"	m
P	init.vim	/^  nmap P <plug>(YoinkPaste_P)$/;"	m
Prose	prose.vim	/^function! Prose()$/;"	f
Q	prose.vim	/^  nnoremap <buffer> <silent> Q gqap$/;"	m
Q	prose.vim	/^  xnoremap <buffer> <silent> Q gq$/;"	m
S	clip.vim	/^nmap S <plug>(SubversiveSubstituteToEndOfLine)$/;"	m
S	init.vim	/^  nmap S <plug>(SubversiveSubstituteToEndOfLine)$/;"	m
X	clip.vim	/^nnoremap X D$/;"	m
X	init.vim	/^  nnoremap X D$/;"	m
ZZ	base.vim	/^nnoremap <silent> ZZ :bd<CR>$/;"	m
[F	fzf.vim	/^nnoremap <silent> [F :call fzf#run({$/;"	m
[f	fzf.vim	/^nnoremap [f :Rg <c-r><c-w><cr>$/;"	m
[o	base.vim	/^nnoremap <silent> [o :<C-u>call append(line("."),   repeat([""], v:count1))<CR>$/;"	m
[t	fzf.vim	/^nmap [t :Tags <c-r><c-w><CR> $/;"	m
[w	base.vim	/^nnoremap [w :setlocal nowrap<cr>$/;"	m
[y	clip.vim	/^nmap [y <plug>(YoinkRotateBack)$/;"	m
]F	fzf.vim	/^nnoremap <silent> ]F :call fzf#run({$/;"	m
]f	fzf.vim	/^nnoremap ]f :Rg $/;"	m
]o	base.vim	/^nnoremap <silent> ]o :<C-u>call append(line(".")-1, repeat([""], v:count1))<CR>$/;"	m
]t	fzf.vim	/^nmap ]t :Tags<CR>$/;"	m
]w	base.vim	/^nnoremap ]w :setlocal wrap<cr>$/;"	m
]y	clip.vim	/^nmap ]y <plug>(YoinkRotateForward)$/;"	m
args	coc-settings.json	/^      "args": ["--stdio"],$/;"	a	object:languageserver.intelephense
args	coc-settings.json	/^      "args": ["start"],$/;"	a	object:languageserver.bash
bash	coc-settings.json	/^    "bash": {$/;"	o	object:languageserver
cache	coc-settings.json	/^        "cache": {$/;"	o	object:languageserver.ccls.initializationOptions
ccls	coc-settings.json	/^    "ccls": {$/;"	o	object:languageserver
clang	coc-settings.json	/^        "clang": {$/;"	o	object:languageserver.ccls.initializationOptions
coc.preferences.enableFloatHighlight	coc-settings.json	/^  "coc.preferences.enableFloatHighlight": true,$/;"	b
coc.preferences.formatOnInsertLeave	coc-settings.json	/^  "coc.preferences.formatOnInsertLeave": true,$/;"	b
coc.preferences.formatOnSaveFiletypes	coc-settings.json	/^  "coc.preferences.formatOnSaveFiletypes": [$/;"	a
coc.preferences.formatOnType	coc-settings.json	/^  "coc.preferences.formatOnType": true,$/;"	b
coc.preferences.hoverTarget	coc-settings.json	/^  "coc.preferences.hoverTarget": "float",$/;"	s
coc.source.emoji.filetypes	coc-settings.json	/^  "coc.source.emoji.filetypes": ["markdown"],$/;"	a
coc.source.emoji.priority	coc-settings.json	/^  "coc.source.emoji.priority": 1,$/;"	n
coc.source.file.ignoreHidden	coc-settings.json	/^  "coc.source.file.ignoreHidden": false,$/;"	b
coc_autos	coc.vim	/^augroup coc_autos$/;"	a
codeLens.enable	coc-settings.json	/^  "codeLens.enable": false,$/;"	b
codeLens.separator	coc-settings.json	/^  "codeLens.separator": "⬅",$/;"	s
command	coc-settings.json	/^      "command": "bash-language-server",$/;"	s	object:languageserver.bash
command	coc-settings.json	/^      "command": "ccls",$/;"	s	object:languageserver.ccls
command	coc-settings.json	/^      "command": "gopls",$/;"	s	object:languageserver.golang
command	coc-settings.json	/^      "command": "intelephense",$/;"	s	object:languageserver.intelephense
dependencies	package-lock.json	/^  "dependencies": {$/;"	o
diagnostic.checkCurrentLine	coc-settings.json	/^  "diagnostic.checkCurrentLine": true,$/;"	b
diagnostic.displayByAle	coc-settings.json	/^  "diagnostic.displayByAle": true,$/;"	b
diagnostic.enable	coc-settings.json	/^  "diagnostic.enable": true,$/;"	b
diagnostic.errorSign	coc-settings.json	/^  "diagnostic.errorSign": ">>",$/;"	s
diagnostic.highlightOffset	coc-settings.json	/^  "diagnostic.highlightOffset": 1000,$/;"	n
diagnostic.hintSign	coc-settings.json	/^  "diagnostic.hintSign": ">>",$/;"	s
diagnostic.infoSign	coc-settings.json	/^  "diagnostic.infoSign": ">>",$/;"	s
diagnostic.level	coc-settings.json	/^  "diagnostic.level": "information",$/;"	s
diagnostic.messageDelay	coc-settings.json	/^  "diagnostic.messageDelay": 500,$/;"	n
diagnostic.messageTarget	coc-settings.json	/^  "diagnostic.messageTarget": "float",$/;"	s
diagnostic.refreshOnInsertMode	coc-settings.json	/^  "diagnostic.refreshOnInsertMode": false,$/;"	b
diagnostic.virtualText	coc-settings.json	/^  "diagnostic.virtualText": true,$/;"	b
diagnostic.virtualTextLineSeparator	coc-settings.json	/^  "diagnostic.virtualTextLineSeparator": " \\\\ ",$/;"	s
diagnostic.virtualTextLines	coc-settings.json	/^  "diagnostic.virtualTextLines": 3,$/;"	n
diagnostic.virtualTextPrefix	coc-settings.json	/^  "diagnostic.virtualTextPrefix": " ",$/;"	s
diagnostic.warningSign	coc-settings.json	/^  "diagnostic.warningSign": "⚠",$/;"	s
directory	coc-settings.json	/^          "directory": "\/tmp\/ccls"$/;"	s	object:languageserver.ccls.initializationOptions.cache
e	fern.vim	/^  nmap <buffer> e <Plug>(fern-action-open:select)$/;"	m
extraArgs	coc-settings.json	/^          "extraArgs": [$/;"	a	object:languageserver.ccls.initializationOptions.clang
filetypes	coc-settings.json	/^      "filetypes": ["c", "cpp", "objc", "objcpp"],$/;"	a	object:languageserver.ccls
filetypes	coc-settings.json	/^      "filetypes": ["go"],$/;"	a	object:languageserver.golang
filetypes	coc-settings.json	/^      "filetypes": ["php"],$/;"	a	object:languageserver.intelephense
filetypes	coc-settings.json	/^      "filetypes": ["sh"],$/;"	a	object:languageserver.bash
fs	base.vim	/^cmap fs w! !sudo tee > \/dev\/null %$/;"	m
g:EditorConfig_exclude_patterns	editorconfig.vim	/^let g:EditorConfig_exclude_patterns = ['fugitive:\/\/.*']$/;"	v
g:UltiSnipsExpandTrigger	ultisnips.vim	/^let g:UltiSnipsExpandTrigger = "<Plug>(ultisnips_expand)"$/;"	v
g:UltiSnipsJumpBackwardTrigger	ultisnips.vim	/^let g:UltiSnipsJumpBackwardTrigger	= "<c-k>"$/;"	v
g:UltiSnipsJumpForwardTrigger	ultisnips.vim	/^let g:UltiSnipsJumpForwardTrigger	= "<c-j>"$/;"	v
g:UltiSnipsRemoveSelectModeMappings	ultisnips.vim	/^let g:UltiSnipsRemoveSelectModeMappings = 0$/;"	v
g:airline#extensions#ale#enabled	ale.vim	/^let g:airline#extensions#ale#enabled = 1$/;"	v
g:airline#extensions#tabline#enabled	airline.vim	/^let g:airline#extensions#tabline#enabled = 1$/;"	v
g:airline#extensions#tabline#enabled	theme.vim	/^let g:airline#extensions#tabline#enabled = 1$/;"	v
g:airline_powerline_fonts	airline.vim	/^let g:airline_powerline_fonts = 1$/;"	v
g:airline_powerline_fonts	theme.vim	/^let g:airline_powerline_fonts = 1$/;"	v
g:airline_theme	autoload/theme.vim	/^let g:airline_theme='gruvbox'$/;"	v
g:ale_disable_lsp	ale.vim	/^let g:ale_disable_lsp = 1$/;"	v
g:ale_go_gofmt_options	ale.vim	/^let g:ale_go_gofmt_options = "-s"$/;"	v
g:ale_go_golangci_lint_package	ale.vim	/^let g:ale_go_golangci_lint_package = 1$/;"	v
g:ale_linters	ale.vim	/^let g:ale_linters = {'go': ['gofmt', 'golint', 'go vet']}$/;"	v
g:ale_set_loclist	ale.vim	/^let g:ale_set_loclist = 0$/;"	v
g:ale_set_quickfix	ale.vim	/^let g:ale_set_quickfix = 1$/;"	v
g:ale_sign_error	ale.vim	/^let g:ale_sign_error = '>>'$/;"	v
g:ale_sign_warning	ale.vim	/^let g:ale_sign_warning = '--'$/;"	v
g:ale_virtualtext_cursor	ale.vim	/^let g:ale_virtualtext_cursor = 1$/;"	v
g:coc_global_extensions	coc.vim	/^    let g:coc_global_extensions += ['coc-flutter']$/;"	v
g:coc_global_extensions	coc.vim	/^let g:coc_global_extensions = [$/;"	v
g:coc_snippet_next	coc.vim	/^let g:coc_snippet_next = '<c-j>'$/;"	v
g:coc_snippet_prev	coc.vim	/^let g:coc_snippet_prev = '<c-k>'$/;"	v
g:fern#default_hidden	fern.vim	/^let g:fern#default_hidden = 1$/;"	v
g:fern#drawer_width	fern.vim	/^let g:fern#drawer_width = 40$/;"	v
g:fern#renderer	fern.vim	/^let g:fern#renderer = "nerdfont"$/;"	v
g:floaterm_keymap_kill	floaterm.vim	/^let g:floaterm_keymap_kill = '<F9>'$/;"	v
g:floaterm_keymap_new	floaterm.vim	/^let g:floaterm_keymap_new    = '<F8>'$/;"	v
g:floaterm_keymap_next	floaterm.vim	/^let g:floaterm_keymap_next   = '<F7>'$/;"	v
g:floaterm_keymap_prev	floaterm.vim	/^let g:floaterm_keymap_prev   = '<F6>'$/;"	v
g:floaterm_keymap_toggle	floaterm.vim	/^let g:floaterm_keymap_toggle = '<F5>'$/;"	v
g:go_code_completion_enabled	vimgo.vim	/^let g:go_code_completion_enabled = 0$/;"	v
g:go_def_mapping_enabled	vimgo.vim	/^let g:go_def_mapping_enabled = 0$/;"	v
g:go_diagnostics_enabled	vimgo.vim	/^let g:go_diagnostics_enabled = 1$/;"	v
g:go_doc_keywordprg_enabled	vimgo.vim	/^let g:go_doc_keywordprg_enabled = 0$/;"	v
g:go_doc_popup_window	vimgo.vim	/^let g:go_doc_popup_window = 1$/;"	v
g:go_echo_go_info	vimgo.vim	/^let g:go_echo_go_info = 0$/;"	v
g:go_fmt_autosave	vimgo.vim	/^let g:go_fmt_autosave = 1$/;"	v
g:go_fmt_command	vimgo.vim	/^let g:go_fmt_command = "goimports"$/;"	v
g:go_gopls_complete_unimported	vimgo.vim	/^let g:go_gopls_complete_unimported = 1$/;"	v
g:go_gopls_deep_completion	vimgo.vim	/^let g:go_gopls_deep_completion = 1$/;"	v
g:go_gopls_enabled	vimgo.vim	/^let g:go_gopls_enabled = 0$/;"	v
g:go_gopls_fuzzy_matching	vimgo.vim	/^let g:go_gopls_fuzzy_matching = 1$/;"	v
g:go_gopls_staticcheck	vimgo.vim	/^let g:go_gopls_staticcheck = 1$/;"	v
g:go_gopls_use_placeholders	vimgo.vim	/^let g:go_gopls_use_placeholders = 1 $/;"	v
g:go_highlight_build_constraints	vimgo.vim	/^let g:go_highlight_build_constraints = 1$/;"	v
g:go_highlight_diagnostic_errors	vimgo.vim	/^let g:go_highlight_diagnostic_errors = 1$/;"	v
g:go_highlight_extra_types	vimgo.vim	/^let g:go_highlight_extra_types = 1$/;"	v
g:go_highlight_fields	vimgo.vim	/^let g:go_highlight_fields = 1$/;"	v
g:go_highlight_function_calls	vimgo.vim	/^let g:go_highlight_function_calls = 1$/;"	v
g:go_highlight_function_parameters	vimgo.vim	/^let g:go_highlight_function_parameters = 1$/;"	v
g:go_highlight_functions	vimgo.vim	/^let g:go_highlight_functions = 1$/;"	v
g:go_highlight_generate_tags	vimgo.vim	/^let g:go_highlight_generate_tags = 1$/;"	v
g:go_highlight_operators	vimgo.vim	/^let g:go_highlight_operators = 1$/;"	v
g:go_highlight_types	vimgo.vim	/^let g:go_highlight_types = 1$/;"	v
g:go_highlight_variable_assignments	vimgo.vim	/^let g:go_highlight_variable_assignments = 1$/;"	v
g:go_highlight_variable_declarations	vimgo.vim	/^let g:go_highlight_variable_declarations = 1$/;"	v
g:go_snippet_engine	vimgo.vim	/^let g:go_snippet_engine = ''$/;"	v
g:gruvbox_italic	gruvbox.vim	/^let g:gruvbox_italic=1$/;"	v
g:gruvbox_italic	theme.vim	/^let g:gruvbox_italic=1$/;"	v
g:gutentags_ctags_tagfile	gutentags.vim	/^let g:gutentags_ctags_tagfile = '.tags'$/;"	v
g:gutentags_file_list_command	gutentags.vim	/^let g:gutentags_file_list_command = {$/;"	v
g:lexical#dictionary	prose.vim	/^  let g:lexical#dictionary = ['\/usr\/share\/dict\/words',]$/;"	v
g:lexical#spell	prose.vim	/^  let g:lexical#spell = 1$/;"	v
g:lexical#spelllang	prose.vim	/^  let g:lexical#spelllang = ['en_us','id_ID',]$/;"	v
g:lexical#thesaurus	prose.vim	/^  let g:lexical#thesaurus = ['~\/.config\/nvim\/thesaurus\/words.txt']$/;"	v
g:thematic#themes	theme.vim	/^let g:thematic#themes = {$/;"	v
g:vimwiki_table_mappings	wiki.vim	/^let g:vimwiki_table_mappings = 0$/;"	v
g:yoinkAutoFormatPaste	clip.vim	/^let g:yoinkAutoFormatPaste = 1$/;"	v
g:yoinkIncludeDeleteOperations	clip.vim	/^let g:yoinkIncludeDeleteOperations = 1$/;"	v
g:yoinkSavePersistently	clip.vim	/^let g:yoinkSavePersistently = 1$/;"	v
gR	init.vim	/^  nnoremap <silent> gR :<C-u>call VSCodeNotify('goToPreviousReference')<CR>$/;"	m
ga	coc.vim	/^nmap <silent> ga <Plug>(coc-codelens-action)$/;"	m
gc	init.vim	/^  nmap gc  <Plug>VSCodeCommentary$/;"	m
gc	init.vim	/^  omap gc  <Plug>VSCodeCommentary$/;"	m
gc	init.vim	/^  xmap gc  <Plug>VSCodeCommentary$/;"	m
gcc	init.vim	/^  nmap gcc <Plug>VSCodeCommentaryLine$/;"	m
gd	coc.vim	/^nmap <silent> gd <Plug>(coc-definition)$/;"	m
get_initials_low	pythonx/utils.py	/^def get_initials_low(str):$/;"	f
gh	init.vim	/^  nnoremap <silent> gh :<C-u>call VSCodeNotify('closeMarkersNavigation')<CR>$/;"	m
gi	coc.vim	/^nmap <silent> gi <Plug>(coc-implementation)$/;"	m
gl	init.vim	/^  nnoremap <silent> gl :<C-u>call VSCodeNotify('editor.action.openLink')<CR>$/;"	m
gm	fzf.vim	/^nmap gm :Marks<CR>$/;"	m
gn	ale.vim	/^nmap <silent> gn <Plug>(ale_next_wrap)$/;"	m
gn	coc.vim	/^nmap <silent> gn <Plug>(coc-diagnostic-next)$/;"	m
gn	init.vim	/^  nnoremap <silent> gn :<C-u>call VSCodeNotify('editor.action.marker.nextInFiles')<CR>$/;"	m
goconfig	vimgo.vim	/^augroup goconfig$/;"	a
golang	coc-settings.json	/^    "golang": {$/;"	o	object:languageserver
gp	ale.vim	/^nmap <silent> gp <Plug>(ale_previous_wrap)$/;"	m
gp	coc.vim	/^nmap <silent> gp <Plug>(coc-diagnostic-prev)$/;"	m
gp	init.vim	/^  nnoremap <silent> gp :<C-u>call VSCodeNotify('editor.action.marker.prevInFiles')<CR>$/;"	m
gq	base.vim	/^nnoremap <silent> gq :bd<CR>$/;"	m
gr	coc.vim	/^nmap <silent> gr <Plug>(coc-references)$/;"	m
gr	init.vim	/^  nnoremap <silent> gr :<C-u>call VSCodeNotify('goToNextReference')<CR>$/;"	m
gy	coc.vim	/^nmap <silent> gy <Plug>(coc-type-definition)$/;"	m
i	fern.vim	/^  nmap <buffer> i <Plug>(fern-action-rename:bottom)$/;"	m
ignoredRootPaths	coc-settings.json	/^      "ignoredRootPaths": ["~"]$/;"	a	object:languageserver.bash
initializationOptions	coc-settings.json	/^      "initializationOptions": {$/;"	o	object:languageserver.ccls
initializationOptions	coc-settings.json	/^      "initializationOptions": {$/;"	o	object:languageserver.intelephense
integrity	package-lock.json	/^      "integrity": "sha512-KMHP\/Jq53jZKTY9iTUt3dIVl\/be6UPs2INo96+BnZHLKxYNTfwMmlgHTaMWyGZoO74R/;"	s	object:dependencies.yarn
intelephense	coc-settings.json	/^    "intelephense": {$/;"	o	object:languageserver
jj	base.vim	/^cnoremap jj <c-c><esc>$/;"	m
jj	base.vim	/^inoremap jj <esc>$/;"	m
kk	base.vim	/^cnoremap kk <c-c><esc>$/;"	m
kk	base.vim	/^inoremap kk <esc>$/;"	m
languageserver	coc-settings.json	/^  "languageserver": {$/;"	o
lockfileVersion	package-lock.json	/^  "lockfileVersion": 1,$/;"	n
m	clip.vim	/^nnoremap m m$/;"	m
mapleader	init.vim	/^let mapleader = ","$/;"	v
my	fern.vim	/^augroup my-fern$/;"	a
p	clip.vim	/^nmap p <plug>(YoinkPaste_p)$/;"	m
p	fern.vim	/^  nmap <buffer> p <Plug>(fern-action-clipboard-paste)$/;"	m
p	init.vim	/^  nmap p <plug>(YoinkPaste_p)$/;"	m
pairs.enableBackspace	coc-settings.json	/^  "pairs.enableBackspace": true,$/;"	b
plugins_dir	fzf.vim	/^let plugins_dir='~\/.config\/nvim\/plugged' $/;"	v
prettier.arrowParens	coc-settings.json	/^  "prettier.arrowParens": "always",$/;"	s
prettier.jsxSingleQuote	coc-settings.json	/^  "prettier.jsxSingleQuote": true,$/;"	b
prettier.printWidth	coc-settings.json	/^  "prettier.printWidth": 100,$/;"	n
prettier.semi	coc-settings.json	/^  "prettier.semi": false,$/;"	b
prettier.singleQuote	coc-settings.json	/^  "prettier.singleQuote": true,$/;"	b
prettier.tabWidth	coc-settings.json	/^  "prettier.tabWidth": 2,$/;"	n
prettier.trailingComma	coc-settings.json	/^  "prettier.trailingComma": "all",$/;"	s
preview_file	fzf.vim	/^let preview_file = plugins_dir . "\/fzf.vim\/bin\/preview.sh"$/;"	v
python.formatting.provider	coc-settings.json	/^  "python.formatting.provider": "autopep8",$/;"	s
python.jediEnabled	coc-settings.json	/^  "python.jediEnabled": false,$/;"	b
requires	package-lock.json	/^  "requires": true,$/;"	b
resolved	package-lock.json	/^      "resolved": "https:\/\/registry.npmjs.org\/yarn\/-\/yarn-1.22.0.tgz",$/;"	s	object:dependencies.yarn
resourceDir	coc-settings.json	/^          "resourceDir": "\/Library\/Developer\/CommandLineTools\/usr\/lib\/clang\/11.0.0",$/;"	s	object:languageserver.ccls.initializationOptions.clang
rootPatterns	coc-settings.json	/^      "rootPatterns": [".ccls", "compile_commands.json", ".vim\/", ".git\/", ".hg\/"],$/;"	a	object:languageserver.ccls
rootPatterns	coc-settings.json	/^      "rootPatterns": ["go.mod", ".vim\/", ".git\/", ".hg\/"]$/;"	a	object:languageserver.golang
rust-analyzer.completion.postfix.enable	coc-settings.json	/^  "rust-analyzer.completion.postfix.enable": true,$/;"	b
rust-analyzer.inlayHints.chainingHints	coc-settings.json	/^  "rust-analyzer.inlayHints.chainingHints": true,$/;"	b
rust-analyzer.inlayHints.refreshOnInsertMode	coc-settings.json	/^  "rust-analyzer.inlayHints.refreshOnInsertMode": true,$/;"	b
rust-analyzer.lens.enable	coc-settings.json	/^  "rust-analyzer.lens.enable": true,$/;"	b
rust-analyzer.lens.run	coc-settings.json	/^  "rust-analyzer.lens.run": true,$/;"	b
rust-analyzer.updates.channel	coc-settings.json	/^  "rust-analyzer.updates.channel": "stable"$/;"	s
s	clip.vim	/^nmap s <plug>(SubversiveSubstitute)$/;"	m
s	init.vim	/^  nmap s <plug>(SubversiveSubstitute)$/;"	m
s:buflist	fzf.vim	/^function! s:buflist()$/;"	f
s:bufopen	fzf.vim	/^function! s:bufopen(e)$/;"	f
s:check_back_space	coc.vim	/^function! s:check_back_space() abort$/;"	f
s:init_fern	fern.vim	/^function! s:init_fern() abort$/;"	f
signature.enable	coc-settings.json	/^  "signature.enable": true,$/;"	b
signature.floatMaxWidth	coc-settings.json	/^  "signature.floatMaxWidth": 100,$/;"	n
snake_case	pythonx/utils.py	/^def snake_case(str):$/;"	f
space_between_camels	pythonx/utils.py	/^def space_between_camels(str):$/;"	f
ss	clip.vim	/^nmap ss <plug>(SubversiveSubstituteLine)$/;"	m
ss	init.vim	/^  nmap ss <plug>(SubversiveSubstituteLine)$/;"	m
storagePath	coc-settings.json	/^        "storagePath": "\/tmp\/intelephense"$/;"	s	object:languageserver.intelephense.initializationOptions
struct_finder	pythonx/utils.py	/^def struct_finder(buffer, line):$/;"	f
suggest.enablePreselect	coc-settings.json	/^  "suggest.enablePreselect": false,$/;"	b
suggest.floatEnable	coc-settings.json	/^  "suggest.floatEnable": true,$/;"	b
suggest.languageSourcePriority	coc-settings.json	/^  "suggest.languageSourcePriority": 99,$/;"	n
suggest.noselect	coc-settings.json	/^  "suggest.noselect": true,$/;"	b
suggest.numberSelect	coc-settings.json	/^  "suggest.numberSelect": false,$/;"	b
typescript.showUnused	coc-settings.json	/^  "typescript.showUnused": true,$/;"	b
typescript.suggest.autoImports	coc-settings.json	/^  "typescript.suggest.autoImports": true,$/;"	b
typescript.suggest.completeFunctionCalls	coc-settings.json	/^  "typescript.suggest.completeFunctionCalls": true,$/;"	b
typescript.updateImportsOnFileMove.enable	coc-settings.json	/^  "typescript.updateImportsOnFileMove.enable": true,$/;"	b
version	package-lock.json	/^      "version": "1.22.0",$/;"	s	object:dependencies.yarn
x	clip.vim	/^nnoremap x d$/;"	m
x	clip.vim	/^xnoremap x d$/;"	m
x	fern.vim	/^  nmap <buffer> x <Plug>(fern-action-clipboard-move)$/;"	m
x	init.vim	/^  nnoremap x d$/;"	m
x	init.vim	/^  xnoremap x d$/;"	m
xx	clip.vim	/^nnoremap xx dd$/;"	m
xx	init.vim	/^  nnoremap xx dd$/;"	m
y	clip.vim	/^nmap y <plug>(YoinkYankPreserveCursorPosition)$/;"	m
y	clip.vim	/^xmap y <plug>(YoinkYankPreserveCursorPosition)$/;"	m
y	fern.vim	/^  nmap <buffer> y <Plug>(fern-action-clipboard-copy)$/;"	m
yarn	package-lock.json	/^    "yarn": {$/;"	o	object:dependencies
